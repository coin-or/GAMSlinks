// gdxco.hpp
// Header file for C++-style (object) interface to the GDX library
// generated by apiwrapper

#if ! defined(_GDXCO_HPP_)
#     define  _GDXCO_HPP_

#include "gdxcc.h"
/* standard includes */
#include <string>
#include <cstring>

namespace GAMS {
class GDX
{
public:
  GDX ();                  // default constructor with out init call
  GDX (std::string &msg);  // New object with library loading
  GDX (const std::string &dirname, std::string &msg); // New object with library loading from dirname
  GDX (const std::string &dirname, const std::string &libname, std::string &msg); // New object with library loading from dirname and libraryname
  GDX (gdxHandle_t gdxHandle, std::string &msg); // constructor if we already have a gdxHandle
  GDX (gdxHandle_t gdxHandle, const std::string &dirname, std::string &msg); // constructor if we already have a gdxHandle
  ~GDX ();                 // destructor

  int Init (std::string &msg);
  int Init (const std::string &dirname, std::string &msg);
  int Init (const std::string &dirname, const std::string &libname, std::string &msg);
  int Init (gdxHandle_t gdxHandle, std::string &msg);
  int Init (gdxHandle_t gdxHandle, const std::string &dirname, std::string &msg);
  gdxHandle_t GetHandle ();
  inline int     AcronymCount ()
  {  return gdxAcronymCount (gdxHandle_);}
  inline int     AcronymGetInfo (int N, std::string &AName, std::string &Atext, int &Indx)
  { int rc=gdxAcronymGetInfo (gdxHandle_, N, tmpS0, tmpS1, &Indx); AName=tmpS0; Atext=tmpS1; return rc; }
  inline int     AcronymIndex (double V)
  {  return gdxAcronymIndex (gdxHandle_, V);}
  inline int     AcronymName (double V, std::string &AName)
  { int rc=gdxAcronymName (gdxHandle_, V, tmpS0); AName=tmpS0; return rc; }
  inline int     AcronymSetInfo (int N, const std::string &AName, const std::string &Atext, int Indx)
  {  return gdxAcronymSetInfo (gdxHandle_, N, AName.c_str(), Atext.c_str(), Indx);}
  inline double     AcronymValue (int Indx)
  {  return gdxAcronymValue (gdxHandle_, Indx);}
  inline int     AddAlias (const std::string &AName1, const std::string &AName2)
  {  return gdxAddAlias (gdxHandle_, AName1.c_str(), AName2.c_str());}
  inline int     AddSetText (const std::string &s, int &N)
  {  return gdxAddSetText (gdxHandle_, s.c_str(), &N);}
  inline int     Close ()
  {  return gdxClose (gdxHandle_);}
  inline int     DataErrorCount ()
  {  return gdxDataErrorCount (gdxHandle_);}
  inline int     DataErrorRecord (int Rn, int AElements[], double AVals[])
  {  return gdxDataErrorRecord (gdxHandle_, Rn, AElements, AVals);}
  inline int     DataReadDone ()
  {  return gdxDataReadDone (gdxHandle_);}
  inline int     DataReadFilteredStart (int SyNr, const int ADomainNrs[], int &NrRecs)
  {  return gdxDataReadFilteredStart (gdxHandle_, SyNr, ADomainNrs, &NrRecs);}
  inline int     DataReadMap (int Rn, int AElements[], double AVals[], int &AFDim)
  {  return gdxDataReadMap (gdxHandle_, Rn, AElements, AVals, &AFDim);}
  inline int     DataReadMapStart (int SyNr, int &NrRecs)
  {  return gdxDataReadMapStart (gdxHandle_, SyNr, &NrRecs);}
  inline int     DataReadRaw (int AElements[], double AVals[], int &AFDim)
  {  return gdxDataReadRaw (gdxHandle_, AElements, AVals, &AFDim);}
  inline int     DataReadRawStart (int SyNr, int &NrRecs)
  {  return gdxDataReadRawStart (gdxHandle_, SyNr, &NrRecs);}
  inline int     DataReadSlice (const std::string AFiltElements[], int &ADim, TDataStoreProc_t DP)
  { for (int i=0; i<GMS_MAX_INDEX_DIM; i++) DP0[i]=AFiltElements[i].c_str();int rc=gdxDataReadSlice (gdxHandle_, DP0, &ADim, DP); return rc; }
  inline int     DataReadSliceStart (int ASyNr, int ANrElems[])
  {  return gdxDataReadSliceStart (gdxHandle_, ASyNr, ANrElems);}
  inline int     DataReadStr (std::string AStrElements[], double AVals[], int &AFDim)
  { int rc=gdxDataReadStr (gdxHandle_, DPout, AVals, &AFDim); for (int i=0; i<GMS_MAX_INDEX_DIM; i++) AStrElements[i]=DPout[i]; return rc; }
  inline int     DataReadStrStart (int SyNr, int &NrRecs)
  {  return gdxDataReadStrStart (gdxHandle_, SyNr, &NrRecs);}
  inline int     DataSliceUELS (const int AIndx[], std::string AUELs[])
  { int rc=gdxDataSliceUELS (gdxHandle_, AIndx, DPout); for (int i=0; i<GMS_MAX_INDEX_DIM; i++) AUELs[i]=DPout[i]; return rc; }
  inline int     DataWriteDone ()
  {  return gdxDataWriteDone (gdxHandle_);}
  inline int     DataWriteMap (const int AElements[], const double AVals[])
  {  return gdxDataWriteMap (gdxHandle_, AElements, AVals);}
  inline int     DataWriteMapStart (const std::string &AName, const std::string &Atext, int ADim, int AType, int AUserInfo)
  {  return gdxDataWriteMapStart (gdxHandle_, AName.c_str(), Atext.c_str(), ADim, AType, AUserInfo);}
  inline int     DataWriteRaw (const int AElements[], const double AVals[])
  {  return gdxDataWriteRaw (gdxHandle_, AElements, AVals);}
  inline int     DataWriteRawStart (const std::string &AName, const std::string &Atext, int ADim, int AType, int AUserInfo)
  {  return gdxDataWriteRawStart (gdxHandle_, AName.c_str(), Atext.c_str(), ADim, AType, AUserInfo);}
  inline int     DataWriteStr (const std::string AStrElements[], const double AVals[])
  { for (int i=0; i<GMS_MAX_INDEX_DIM; i++) DP0[i]=AStrElements[i].c_str();int rc=gdxDataWriteStr (gdxHandle_, DP0, AVals); return rc; }
  inline int     DataWriteStrStart (const std::string &AName, const std::string &Atext, int ADim, int AType, int AUserInfo)
  {  return gdxDataWriteStrStart (gdxHandle_, AName.c_str(), Atext.c_str(), ADim, AType, AUserInfo);}
  inline int     GetDLLVersion (std::string &V)
  { int rc=gdxGetDLLVersion (gdxHandle_, tmpS0); V=tmpS0; return rc; }
  inline int     ErrorCount ()
  {  return gdxErrorCount (gdxHandle_);}
  inline int     ErrorStr (int N, std::string &s)
  { int rc=gdxErrorStr (gdxHandle_, N, tmpS0); s=tmpS0; return rc; }
  inline int     FileInfo (int &FileVer, int &ComprLev)
  {  return gdxFileInfo (gdxHandle_, &FileVer, &ComprLev);}
  inline int     FileVersion (std::string &FileStr, std::string &ProduceStr)
  { int rc=gdxFileVersion (gdxHandle_, tmpS0, tmpS1); FileStr=tmpS0; ProduceStr=tmpS1; return rc; }
  inline int     FilterExists (int N)
  {  return gdxFilterExists (gdxHandle_, N);}
  inline int     FilterRegister (int V)
  {  return gdxFilterRegister (gdxHandle_, V);}
  inline int     FilterRegisterDone ()
  {  return gdxFilterRegisterDone (gdxHandle_);}
  inline int     FilterRegisterStart (int Nr)
  {  return gdxFilterRegisterStart (gdxHandle_, Nr);}
  inline int     FindSymbol (const std::string &AName, int &AIx)
  {  return gdxFindSymbol (gdxHandle_, AName.c_str(), &AIx);}
  inline int     GetElemText (int N, std::string &s, int &Node)
  { int rc=gdxGetElemText (gdxHandle_, N, tmpS0, &Node); s=tmpS0; return rc; }
  inline int     GetLastError ()
  {  return gdxGetLastError (gdxHandle_);}
  inline int     GetSpecialValues (double AVals[])
  {  return gdxGetSpecialValues (gdxHandle_, AVals);}
  inline int     GetUEL (int UelNr, std::string &s)
  { int rc=gdxGetUEL (gdxHandle_, UelNr, tmpS0); s=tmpS0; return rc; }
  inline int     MapValue (double D, int &sv)
  {  return gdxMapValue (gdxHandle_, D, &sv);}
  inline int     OpenRead (const std::string &Afn, int &ErrNr)
  {  return gdxOpenRead (gdxHandle_, Afn.c_str(), &ErrNr);}
  inline int     OpenWrite (const std::string &Afn, const std::string &AProducer, int &ErrNr)
  {  return gdxOpenWrite (gdxHandle_, Afn.c_str(), AProducer.c_str(), &ErrNr);}
  inline int     OpenWriteEx (const std::string &Afn, const std::string &AProducer, int Compr, int &ErrNr)
  {  return gdxOpenWriteEx (gdxHandle_, Afn.c_str(), AProducer.c_str(), Compr, &ErrNr);}
  inline int     ResetSpecialValues ()
  {  return gdxResetSpecialValues (gdxHandle_);}
  inline int     SetHasText (int N)
  {  return gdxSetHasText (gdxHandle_, N);}
  inline int     SetReadSpecialValues (const double AVals[])
  {  return gdxSetReadSpecialValues (gdxHandle_, AVals);}
  inline int     SetSpecialValues (const double AVals[])
  {  return gdxSetSpecialValues (gdxHandle_, AVals);}
  inline int     SetTextNodeNr (int N, int Node)
  {  return gdxSetTextNodeNr (gdxHandle_, N, Node);}
  inline int     SetTraceLevel (int N, const std::string &s)
  {  return gdxSetTraceLevel (gdxHandle_, N, s.c_str());}
  inline int     SymbIndxMaxLength (int SyNr, int DimInfo[])
  {  return gdxSymbIndxMaxLength (gdxHandle_, SyNr, DimInfo);}
  inline int     SymbMaxLength ()
  {  return gdxSymbMaxLength (gdxHandle_);}
  inline int     SymbolAddComment (int SyNr, const std::string &s)
  {  return gdxSymbolAddComment (gdxHandle_, SyNr, s.c_str());}
  inline int     SymbolGetComment (int SyNr, int N, std::string &s)
  { int rc=gdxSymbolGetComment (gdxHandle_, SyNr, N, tmpS0); s=tmpS0; return rc; }
  inline int     SymbolGetDomain (int SyNr, int DomainIDs[])
  {  return gdxSymbolGetDomain (gdxHandle_, SyNr, DomainIDs);}
  inline int     SymbolInfo (int SyNr, std::string &AName, int &ADim, int &ATyp)
  { int rc=gdxSymbolInfo (gdxHandle_, SyNr, tmpS0, &ADim, &ATyp); AName=tmpS0; return rc; }
  inline int     SymbolInfoX (int SyNr, int &ACount, int &AUserInfo, std::string &AExplTxt)
  { int rc=gdxSymbolInfoX (gdxHandle_, SyNr, &ACount, &AUserInfo, tmpS0); AExplTxt=tmpS0; return rc; }
  inline int     SymbolSetDomain (const std::string DomainIDs[])
  { for (int i=0; i<GMS_MAX_INDEX_DIM; i++) DP0[i]=DomainIDs[i].c_str();int rc=gdxSymbolSetDomain (gdxHandle_, DP0); return rc; }
  inline int     SystemInfo (int &NrSy, int &NrUel)
  {  return gdxSystemInfo (gdxHandle_, &NrSy, &NrUel);}
  inline int     UELMaxLength ()
  {  return gdxUELMaxLength (gdxHandle_);}
  inline int     UELRegisterDone ()
  {  return gdxUELRegisterDone (gdxHandle_);}
  inline int     UELRegisterMap (int UelNr, const std::string &Elem)
  {  return gdxUELRegisterMap (gdxHandle_, UelNr, Elem.c_str());}
  inline int     UELRegisterMapStart ()
  {  return gdxUELRegisterMapStart (gdxHandle_);}
  inline int     UELRegisterRaw (const std::string &Elem)
  {  return gdxUELRegisterRaw (gdxHandle_, Elem.c_str());}
  inline int     UELRegisterRawStart ()
  {  return gdxUELRegisterRawStart (gdxHandle_);}
  inline int     UELRegisterStr (const std::string &Elem, int &UelNr)
  {  return gdxUELRegisterStr (gdxHandle_, Elem.c_str(), &UelNr);}
  inline int     UELRegisterStrStart ()
  {  return gdxUELRegisterStrStart (gdxHandle_);}
  inline int     UMFindUEL (const std::string &s, int &EN, int &UMap)
  {  return gdxUMFindUEL (gdxHandle_, s.c_str(), &EN, &UMap);}
  inline int     UMUelGet (int N, std::string &s, int &UMap)
  { int rc=gdxUMUelGet (gdxHandle_, N, tmpS0, &UMap); s=tmpS0; return rc; }
  inline int     UMUelInfo (int &NrElem, int &HighMap)
  {  return gdxUMUelInfo (gdxHandle_, &NrElem, &HighMap);}
  inline int     CurrentDim ()
  {  return gdxCurrentDim (gdxHandle_);}
  static int libraryLoad(char *errBuf, int errBufLen);

 private:
  gdxHandle_t gdxHandle_;
  int extHandle;
  static int numInst;
  static int isLoaded;
  static int gdxGetReady (std::string& msg);
  static int gdxGetReady (const std::string& dir, std::string& msg);
  void create();
  void destroy();
  char *DPout[GMS_MAX_INDEX_DIM];
  const char *DP0[GMS_MAX_INDEX_DIM];
  char tmpS0[256], tmpS1[256];
};
};
#endif /* #if ! defined(_GDXCO_HPP_) */
