unit gdxdodef; { Delphi object wrapper generated by apiwrapper }

{$H- short only }
{$P- no open parameters ==> no maxlen byte}
{$V+ force var strings}

interface

uses
   {$I p3compat},
   gmsgen,gxdefs;


const dt_set   = 0;  { gdxSyType }
      dt_par   = 1;
      dt_var   = 2;
      dt_equ   = 3;
      dt_alias = 4;

const sv_valund  = 0;  { gdxSpecValue }
      sv_valna   = 1;
      sv_valpin  = 2;
      sv_valmin  = 3;
      sv_valeps  = 4;
      sv_normal  = 5;
      sv_acronym = 6;

//tries to load DLL from OS default location
//name for the DLL is automatic
function  gdxGetReady(var Msg: ShortString): boolean;
//tries to load DLL from main program directory; if that fails
//loads DLL from OS default location
//name for the DLL is automatic
function  gdxGetReadyX(var Msg: ShortString): boolean;
//loads DLL from specified directory
//name for the DLL is automatic
function  gdxGetReadyD(const Dir: ShortString; var Msg: ShortString): boolean;
//loads DLL from the full path specified
//no changes are made to the name (platform and file extension)
function  gdxGetReadyL(const LibName: ShortString; var Msg: ShortString): boolean;

procedure gdxSetLoadPath(const s: shortString);
procedure gdxGetLoadPath(var s: shortString);

procedure gdxLibraryUnload;
function  gdxLibraryLoaded: boolean;


type
   TErrorCallback  = function(ErrCount:Integer; const Msg:ShortString):Integer; {$I decorate};
   PTErrorCallBack = ^TErrorCallBack;
   TDataStoreProc  = procedure(const Indx: TgdxUELIndex; const Vals: TgdxValues); {$I decorate};
   PTDataStoreProc = ^TDataStoreProc;

   TGXFILE = Class
   private
      pgdx  : pointer;
      extern: boolean;

   public
      constructor Create          (var Msg: ShortString);
      constructor CreateX         (var Msg: ShortString);
      constructor CreateD         (const Dir: ShortString; var Msg: ShortString);
      constructor CreateL         (const LibName: ShortString; var Msg: ShortString);
      constructor CreateWithHandle(p: pointer; var Msg: ShortString);
      destructor  Destroy         ; override; { always use free and never destroy }

      function  gdxGetHandle            : pointer;
      function  gdxGetScreenIndicator   : boolean;
      procedure gdxSetScreenIndicator   (const ScrInd: boolean);
      function  gdxGetExceptionIndicator: boolean;
      procedure gdxSetExceptionIndicator(const ExcInd: boolean);
      function  gdxGetExitIndicator     : boolean;
      procedure gdxSetExitIndicator     (const ExtInd: boolean);
      function  gdxGetErrorCallback     : PTErrorCallback;
      procedure gdxSetErrorCallback     (ecb: PTErrorCallback);
      function  gdxGetErrorCount        : Integer;
      procedure gdxSetErrorCount        (const ecnt: Integer);

      function  gdxAcronymCount         : Integer;
      function  gdxAcronymGetInfo       (N: Integer; var AName: ShortString; var Atext: ShortString; var Indx: Integer): Integer;
      function  gdxAcronymIndex         (V: Double): Integer;
      function  gdxAcronymName          (V: Double; var AName: ShortString): Integer;
      function  gdxAcronymSetInfo       (N: Integer; const AName: ShortString; const Atext: ShortString; Indx: Integer): Integer;
      function  gdxAcronymValue         (Indx: Integer): Double;
      function  gdxAddAlias             (const AName1: ShortString; const AName2: ShortString): Integer;
      function  gdxAddSetText           (const s: ShortString; var N: Integer): Integer;
      function  gdxClose                : Integer;
      function  gdxDataErrorCount       : Integer;
      function  gdxDataErrorRecord      (Rn: Integer; var AElements: TgdxUELIndex; var AVals: TgdxValues): Integer;
      function  gdxDataReadDone         : Integer;
      function  gdxDataReadFilteredStart(SyNr: Integer; const ADomainNrs: TgdxUELIndex; var NrRecs: Integer): Integer;
      function  gdxDataReadMap          (Rn: Integer; var AElements: TgdxUELIndex; var AVals: TgdxValues; var AFDim: Integer): Integer;
      function  gdxDataReadMapStart     (SyNr: Integer; var NrRecs: Integer): Integer;
      function  gdxDataReadRaw          (var AElements: TgdxUELIndex; var AVals: TgdxValues; var AFDim: Integer): Integer;
      function  gdxDataReadRawStart     (SyNr: Integer; var NrRecs: Integer): Integer;
      function  gdxDataReadSlice        (const AFiltElements: TgdxStrIndex; var ADim: Integer; DP: TDataStoreProc): Integer;
      function  gdxDataReadSliceStart   (ASyNr: Integer; var ANrElems: TgdxUELIndex): Integer;
      function  gdxDataReadStr          (var AStrElements: TgdxStrIndex; var AVals: TgdxValues; var AFDim: Integer): Integer;
      function  gdxDataReadStrStart     (SyNr: Integer; var NrRecs: Integer): Integer;
      function  gdxDataSliceUELS        (const AIndx: TgdxUELIndex; var AUELs: TgdxStrIndex): Integer;
      function  gdxDataWriteDone        : Integer;
      function  gdxDataWriteMap         (const AElements: TgdxUELIndex; const AVals: TgdxValues): Integer;
      function  gdxDataWriteMapStart    (const AName: ShortString; const Atext: ShortString; ADim: Integer; AType: Integer; AUserInfo: Integer): Integer;
      function  gdxDataWriteRaw         (const AElements: TgdxUELIndex; const AVals: TgdxValues): Integer;
      function  gdxDataWriteRawStart    (const AName: ShortString; const Atext: ShortString; ADim: Integer; AType: Integer; AUserInfo: Integer): Integer;
      function  gdxDataWriteStr         (const AStrElements: TgdxStrIndex; const AVals: TgdxValues): Integer;
      function  gdxDataWriteStrStart    (const AName: ShortString; const Atext: ShortString; ADim: Integer; AType: Integer; AUserInfo: Integer): Integer;
      function  gdxGetDLLVersion        (var V: ShortString): Integer;
      function  gdxErrorCount           : Integer;
      function  gdxErrorStr             (N: Integer; var s: ShortString): Integer;
      function  gdxFileInfo             (var FileVer: Integer; var ComprLev: Integer): Integer;
      function  gdxFileVersion          (var FileStr: ShortString; var ProduceStr: ShortString): Integer;
      function  gdxFilterExists         (N: Integer): Integer;
      function  gdxFilterRegister       (V: Integer): Integer;
      function  gdxFilterRegisterDone   : Integer;
      function  gdxFilterRegisterStart  (Nr: Integer): Integer;
      function  gdxFindSymbol           (const AName: ShortString; var AIx: Integer): Integer;
      function  gdxGetElemText          (N: Integer; var s: ShortString; var Node: Integer): Integer;
      function  gdxGetLastError         : Integer;
      function  gdxGetSpecialValues     (var AVals: TgdxSVals): Integer;
      function  gdxGetUEL               (UelNr: Integer; var s: ShortString): Integer;
      function  gdxMapValue             (D: Double; var sv: Integer): Integer;
      function  gdxOpenRead             (const Afn: ShortString; var ErrNr: Integer): Integer;
      function  gdxOpenWrite            (const Afn: ShortString; const AProducer: ShortString; var ErrNr: Integer): Integer;
      function  gdxOpenWriteEx          (const Afn: ShortString; const AProducer: ShortString; Compr: Integer; var ErrNr: Integer): Integer;
      function  gdxResetSpecialValues   : Integer;
      function  gdxSetHasText           (N: Integer): Integer;
      function  gdxSetReadSpecialValues (const AVals: TgdxSVals): Integer;
      function  gdxSetSpecialValues     (const AVals: TgdxSVals): Integer;
      function  gdxSetTextNodeNr        (N: Integer; Node: Integer): Integer;
      function  gdxSetTraceLevel        (N: Integer; const s: ShortString): Integer;
      function  gdxSymbIndxMaxLength    (SyNr: Integer; var DimInfo: TgdxUELIndex): Integer;
      function  gdxSymbMaxLength        : Integer;
      function  gdxSymbolAddComment     (SyNr: Integer; const s: ShortString): Integer;
      function  gdxSymbolGetComment     (SyNr: Integer; N: Integer; var s: ShortString): Integer;
      function  gdxSymbolGetDomain      (SyNr: Integer; var DomainIDs: TgdxUELIndex): Integer;
      function  gdxSymbolInfo           (SyNr: Integer; var AName: ShortString; var ADim: Integer; var ATyp: Integer): Integer;
      function  gdxSymbolInfoX          (SyNr: Integer; var ACount: Integer; var AUserInfo: Integer; var AExplTxt: ShortString): Integer;
      function  gdxSymbolSetDomain      (const DomainIDs: TgdxStrIndex): Integer;
      function  gdxSystemInfo           (var NrSy: Integer; var NrUel: Integer): Integer;
      function  gdxUELMaxLength         : Integer;
      function  gdxUELRegisterDone      : Integer;
      function  gdxUELRegisterMap       (UelNr: Integer; const Elem: ShortString): Integer;
      function  gdxUELRegisterMapStart  : Integer;
      function  gdxUELRegisterRaw       (const Elem: ShortString): Integer;
      function  gdxUELRegisterRawStart  : Integer;
      function  gdxUELRegisterStr       (const Elem: ShortString; var UelNr: Integer): Integer;
      function  gdxUELRegisterStrStart  : Integer;
      function  gdxUMFindUEL            (const s: ShortString; var EN: Integer; var UMap: Integer): Integer;
      function  gdxUMUelGet             (N: Integer; var s: ShortString; var UMap: Integer): Integer;
      function  gdxUMUelInfo            (var NrElem: Integer; var HighMap: Integer): Integer;
      function  gdxCurrentDim           : Integer;
   end;

implementation
uses
   gdxdcdef;

function gdxGetReady(var Msg: ShortString): boolean;
begin
Result := gdxdcdef.gdxGetReady(Msg);
end;

function  gdxGetReadyX(var Msg: ShortString): boolean;
begin
Result := gdxdcdef.gdxGetReadyX(Msg);
end;

function  gdxGetReadyD(const Dir: ShortString; var Msg: ShortString): boolean;
begin
Result := gdxdcdef.gdxGetReadyD(Dir,Msg);
end;

function  gdxGetReadyL(const LibName: ShortString; var Msg: ShortString): boolean;
begin
Result := gdxdcdef.gdxGetReadyL(LibName,Msg);
end;

procedure gdxSetLoadPath(const s: shortString);
begin
gdxdcdef.gdxSetLoadPath(s);
end;

procedure gdxGetLoadPath(var s: shortString);
begin
gdxdcdef.gdxGetLoadPath(s);
end;

procedure gdxLibraryUnload;
begin
gdxdcdef.gdxLibraryUnload;
end;

function  gdxLibraryLoaded: boolean;
begin
Result := gdxdcdef.gdxLibraryLoaded;
end;

constructor TGXFILE.Create(var Msg: ShortString);
var
  ok: boolean;
begin
  inherited Create;
  extern := false;
  ok := gdxdcdef.gdxCreate(pgdx, Msg);
  if not ok then begin
    pgdx := nil;
    if Msg = '' then
       Msg := 'Unknown error calling TGXFILE.Create';
  end
  else Msg := '';
end; (* TGXFILE.Create *)

constructor TGXFILE.CreateX(var Msg: ShortString);
var
  ok: boolean;
begin
  inherited Create;
  extern := false;
  ok := gdxdcdef.gdxCreateX(pgdx, Msg);
  if not ok then begin
    pgdx := nil;
    if Msg = '' then
       Msg := 'Unknown error calling TGXFILE.CreateX';
  end
  else Msg := '';
end; (* TGXFILE.CreateX *)

constructor TGXFILE.CreateD(const Dir: ShortString; var Msg: ShortString);
var
  ok: boolean;
begin
  inherited Create;
  extern := false;
  ok := gdxdcdef.gdxCreateD(pgdx, Dir, Msg);
  if not ok then begin
    pgdx := nil;
    if Msg = '' then
       Msg := 'Unknown error calling TGXFILE.CreateD';
  end
  else Msg := '';
end; (* TGXFILE.CreateD *)

constructor TGXFILE.CreateL(const LibName: ShortString; var Msg: ShortString);
var
  ok: boolean;
begin
  inherited Create;
  extern := false;
  ok := gdxdcdef.gdxCreateL(pgdx, LibName, Msg);
  if not ok then begin
    pgdx := nil;
    if Msg = '' then
       Msg := 'Unknown error calling TGXFILE.CreateL';
  end
  else Msg := '';
end; (* TGXFILE.CreateL *)

constructor TGXFILE.CreateWithHandle(p: pointer; var Msg: ShortString);
var
  ok: boolean;
begin
  inherited Create;
  extern := true;
  pgdx := p;
  ok := gdxdcdef.gdxGetReady(Msg);
  if not ok then begin
    pgdx := nil;
    if Msg = '' then
       Msg := 'Unknown error calling TGXFILE.CreateWithHandle';
  end
  else Msg := '';
end; (* TGXFILE.CreateWithHandle *)

destructor TGXFILE.Destroy;
begin
if not extern
then
   gdxdcdef.gdxFree(pgdx);
inherited destroy;
end;

function TGXFILE.gdxGetHandle: pointer;
begin
Result := pgdx;
end;

function  TGXFILE.gdxGetScreenIndicator: Boolean;
begin
result := gdxdcdef.gdxGetScreenIndicator;
end;

procedure TGXFILE.gdxSetScreenIndicator(const ScrInd: Boolean);
begin
gdxdcdef.gdxSetScreenIndicator(ScrInd);
end;

function  TGXFILE.gdxGetExceptionIndicator: Boolean;
begin
result := gdxdcdef.gdxGetExceptionIndicator;
end;

procedure TGXFILE.gdxSetExceptionIndicator(const ExcInd: Boolean);
begin
gdxdcdef.gdxSetExceptionIndicator(ExcInd);
end;

function  TGXFILE.gdxGetExitIndicator: Boolean;
begin
result := gdxdcdef.gdxGetExitIndicator;
end;

procedure TGXFILE.gdxSetExitIndicator(const ExtInd: Boolean);
begin
gdxdcdef.gdxSetExitIndicator(ExtInd);
end;

function  TGXFILE.gdxGetErrorCount: Integer;
begin
result := gdxdcdef.gdxGetErrorCount;
end;

procedure TGXFILE.gdxSetErrorCount(const ecnt: Integer);
begin
gdxdcdef.gdxSetErrorCount(ecnt);
end;

function  TGXFILE.gdxGetErrorCallback: PTErrorCallBack;
begin
result := PTErrorCallBack(gdxdcdef.gdxGetErrorCallback);
end;

procedure TGXFILE.gdxSetErrorCallback(ecb: PTErrorCallBack);
begin
gdxdcdef.gdxSetErrorCallback(TErrorCallBack(ecb));
end;


function  TGXFILE.gdxAcronymCount: Integer;
begin
result := gdxdcdef.gdxAcronymCount(pgdx);
end;

function  TGXFILE.gdxAcronymGetInfo(N: Integer; var AName: ShortString; var Atext: ShortString; var Indx: Integer): Integer;
begin
result := gdxdcdef.gdxAcronymGetInfo(pgdx, N, AName, Atext, Indx);
end;

function  TGXFILE.gdxAcronymIndex(V: Double): Integer;
begin
result := gdxdcdef.gdxAcronymIndex(pgdx, V);
end;

function  TGXFILE.gdxAcronymName(V: Double; var AName: ShortString): Integer;
begin
result := gdxdcdef.gdxAcronymName(pgdx, V, AName);
end;

function  TGXFILE.gdxAcronymSetInfo(N: Integer; const AName: ShortString; const Atext: ShortString; Indx: Integer): Integer;
begin
result := gdxdcdef.gdxAcronymSetInfo(pgdx, N, AName, Atext, Indx);
end;

function  TGXFILE.gdxAcronymValue(Indx: Integer): Double;
begin
result := gdxdcdef.gdxAcronymValue(pgdx, Indx);
end;

function  TGXFILE.gdxAddAlias(const AName1: ShortString; const AName2: ShortString): Integer;
begin
result := gdxdcdef.gdxAddAlias(pgdx, AName1, AName2);
end;

function  TGXFILE.gdxAddSetText(const s: ShortString; var N: Integer): Integer;
begin
result := gdxdcdef.gdxAddSetText(pgdx, s, N);
end;

function  TGXFILE.gdxClose: Integer;
begin
result := gdxdcdef.gdxClose(pgdx);
end;

function  TGXFILE.gdxDataErrorCount: Integer;
begin
result := gdxdcdef.gdxDataErrorCount(pgdx);
end;

function  TGXFILE.gdxDataErrorRecord(Rn: Integer; var AElements: TgdxUELIndex; var AVals: TgdxValues): Integer;
begin
result := gdxdcdef.gdxDataErrorRecord(pgdx, Rn, AElements, AVals);
end;

function  TGXFILE.gdxDataReadDone: Integer;
begin
result := gdxdcdef.gdxDataReadDone(pgdx);
end;

function  TGXFILE.gdxDataReadFilteredStart(SyNr: Integer; const ADomainNrs: TgdxUELIndex; var NrRecs: Integer): Integer;
begin
result := gdxdcdef.gdxDataReadFilteredStart(pgdx, SyNr, ADomainNrs, NrRecs);
end;

function  TGXFILE.gdxDataReadMap(Rn: Integer; var AElements: TgdxUELIndex; var AVals: TgdxValues; var AFDim: Integer): Integer;
begin
result := gdxdcdef.gdxDataReadMap(pgdx, Rn, AElements, AVals, AFDim);
end;

function  TGXFILE.gdxDataReadMapStart(SyNr: Integer; var NrRecs: Integer): Integer;
begin
result := gdxdcdef.gdxDataReadMapStart(pgdx, SyNr, NrRecs);
end;

function  TGXFILE.gdxDataReadRaw(var AElements: TgdxUELIndex; var AVals: TgdxValues; var AFDim: Integer): Integer;
begin
result := gdxdcdef.gdxDataReadRaw(pgdx, AElements, AVals, AFDim);
end;

function  TGXFILE.gdxDataReadRawStart(SyNr: Integer; var NrRecs: Integer): Integer;
begin
result := gdxdcdef.gdxDataReadRawStart(pgdx, SyNr, NrRecs);
end;

function  TGXFILE.gdxDataReadSlice(const AFiltElements: TgdxStrIndex; var ADim: Integer; DP: TDataStoreProc): Integer;
begin
result := gdxdcdef.gdxDataReadSlice(pgdx, AFiltElements, ADim, DP);
end;

function  TGXFILE.gdxDataReadSliceStart(ASyNr: Integer; var ANrElems: TgdxUELIndex): Integer;
begin
result := gdxdcdef.gdxDataReadSliceStart(pgdx, ASyNr, ANrElems);
end;

function  TGXFILE.gdxDataReadStr(var AStrElements: TgdxStrIndex; var AVals: TgdxValues; var AFDim: Integer): Integer;
begin
result := gdxdcdef.gdxDataReadStr(pgdx, AStrElements, AVals, AFDim);
end;

function  TGXFILE.gdxDataReadStrStart(SyNr: Integer; var NrRecs: Integer): Integer;
begin
result := gdxdcdef.gdxDataReadStrStart(pgdx, SyNr, NrRecs);
end;

function  TGXFILE.gdxDataSliceUELS(const AIndx: TgdxUELIndex; var AUELs: TgdxStrIndex): Integer;
begin
result := gdxdcdef.gdxDataSliceUELS(pgdx, AIndx, AUELs);
end;

function  TGXFILE.gdxDataWriteDone: Integer;
begin
result := gdxdcdef.gdxDataWriteDone(pgdx);
end;

function  TGXFILE.gdxDataWriteMap(const AElements: TgdxUELIndex; const AVals: TgdxValues): Integer;
begin
result := gdxdcdef.gdxDataWriteMap(pgdx, AElements, AVals);
end;

function  TGXFILE.gdxDataWriteMapStart(const AName: ShortString; const Atext: ShortString; ADim: Integer; AType: Integer; AUserInfo: Integer): Integer;
begin
result := gdxdcdef.gdxDataWriteMapStart(pgdx, AName, Atext, ADim, AType, AUserInfo);
end;

function  TGXFILE.gdxDataWriteRaw(const AElements: TgdxUELIndex; const AVals: TgdxValues): Integer;
begin
result := gdxdcdef.gdxDataWriteRaw(pgdx, AElements, AVals);
end;

function  TGXFILE.gdxDataWriteRawStart(const AName: ShortString; const Atext: ShortString; ADim: Integer; AType: Integer; AUserInfo: Integer): Integer;
begin
result := gdxdcdef.gdxDataWriteRawStart(pgdx, AName, Atext, ADim, AType, AUserInfo);
end;

function  TGXFILE.gdxDataWriteStr(const AStrElements: TgdxStrIndex; const AVals: TgdxValues): Integer;
begin
result := gdxdcdef.gdxDataWriteStr(pgdx, AStrElements, AVals);
end;

function  TGXFILE.gdxDataWriteStrStart(const AName: ShortString; const Atext: ShortString; ADim: Integer; AType: Integer; AUserInfo: Integer): Integer;
begin
result := gdxdcdef.gdxDataWriteStrStart(pgdx, AName, Atext, ADim, AType, AUserInfo);
end;

function  TGXFILE.gdxGetDLLVersion(var V: ShortString): Integer;
begin
result := gdxdcdef.gdxGetDLLVersion(pgdx, V);
end;

function  TGXFILE.gdxErrorCount: Integer;
begin
result := gdxdcdef.gdxErrorCount(pgdx);
end;

function  TGXFILE.gdxErrorStr(N: Integer; var s: ShortString): Integer;
begin
result := gdxdcdef.gdxErrorStr(pgdx, N, s);
end;

function  TGXFILE.gdxFileInfo(var FileVer: Integer; var ComprLev: Integer): Integer;
begin
result := gdxdcdef.gdxFileInfo(pgdx, FileVer, ComprLev);
end;

function  TGXFILE.gdxFileVersion(var FileStr: ShortString; var ProduceStr: ShortString): Integer;
begin
result := gdxdcdef.gdxFileVersion(pgdx, FileStr, ProduceStr);
end;

function  TGXFILE.gdxFilterExists(N: Integer): Integer;
begin
result := gdxdcdef.gdxFilterExists(pgdx, N);
end;

function  TGXFILE.gdxFilterRegister(V: Integer): Integer;
begin
result := gdxdcdef.gdxFilterRegister(pgdx, V);
end;

function  TGXFILE.gdxFilterRegisterDone: Integer;
begin
result := gdxdcdef.gdxFilterRegisterDone(pgdx);
end;

function  TGXFILE.gdxFilterRegisterStart(Nr: Integer): Integer;
begin
result := gdxdcdef.gdxFilterRegisterStart(pgdx, Nr);
end;

function  TGXFILE.gdxFindSymbol(const AName: ShortString; var AIx: Integer): Integer;
begin
result := gdxdcdef.gdxFindSymbol(pgdx, AName, AIx);
end;

function  TGXFILE.gdxGetElemText(N: Integer; var s: ShortString; var Node: Integer): Integer;
begin
result := gdxdcdef.gdxGetElemText(pgdx, N, s, Node);
end;

function  TGXFILE.gdxGetLastError: Integer;
begin
result := gdxdcdef.gdxGetLastError(pgdx);
end;

function  TGXFILE.gdxGetSpecialValues(var AVals: TgdxSVals): Integer;
begin
result := gdxdcdef.gdxGetSpecialValues(pgdx, AVals);
end;

function  TGXFILE.gdxGetUEL(UelNr: Integer; var s: ShortString): Integer;
begin
result := gdxdcdef.gdxGetUEL(pgdx, UelNr, s);
end;

function  TGXFILE.gdxMapValue(D: Double; var sv: Integer): Integer;
begin
result := gdxdcdef.gdxMapValue(pgdx, D, sv);
end;

function  TGXFILE.gdxOpenRead(const Afn: ShortString; var ErrNr: Integer): Integer;
begin
result := gdxdcdef.gdxOpenRead(pgdx, Afn, ErrNr);
end;

function  TGXFILE.gdxOpenWrite(const Afn: ShortString; const AProducer: ShortString; var ErrNr: Integer): Integer;
begin
result := gdxdcdef.gdxOpenWrite(pgdx, Afn, AProducer, ErrNr);
end;

function  TGXFILE.gdxOpenWriteEx(const Afn: ShortString; const AProducer: ShortString; Compr: Integer; var ErrNr: Integer): Integer;
begin
result := gdxdcdef.gdxOpenWriteEx(pgdx, Afn, AProducer, Compr, ErrNr);
end;

function  TGXFILE.gdxResetSpecialValues: Integer;
begin
result := gdxdcdef.gdxResetSpecialValues(pgdx);
end;

function  TGXFILE.gdxSetHasText(N: Integer): Integer;
begin
result := gdxdcdef.gdxSetHasText(pgdx, N);
end;

function  TGXFILE.gdxSetReadSpecialValues(const AVals: TgdxSVals): Integer;
begin
result := gdxdcdef.gdxSetReadSpecialValues(pgdx, AVals);
end;

function  TGXFILE.gdxSetSpecialValues(const AVals: TgdxSVals): Integer;
begin
result := gdxdcdef.gdxSetSpecialValues(pgdx, AVals);
end;

function  TGXFILE.gdxSetTextNodeNr(N: Integer; Node: Integer): Integer;
begin
result := gdxdcdef.gdxSetTextNodeNr(pgdx, N, Node);
end;

function  TGXFILE.gdxSetTraceLevel(N: Integer; const s: ShortString): Integer;
begin
result := gdxdcdef.gdxSetTraceLevel(pgdx, N, s);
end;

function  TGXFILE.gdxSymbIndxMaxLength(SyNr: Integer; var DimInfo: TgdxUELIndex): Integer;
begin
result := gdxdcdef.gdxSymbIndxMaxLength(pgdx, SyNr, DimInfo);
end;

function  TGXFILE.gdxSymbMaxLength: Integer;
begin
result := gdxdcdef.gdxSymbMaxLength(pgdx);
end;

function  TGXFILE.gdxSymbolAddComment(SyNr: Integer; const s: ShortString): Integer;
begin
result := gdxdcdef.gdxSymbolAddComment(pgdx, SyNr, s);
end;

function  TGXFILE.gdxSymbolGetComment(SyNr: Integer; N: Integer; var s: ShortString): Integer;
begin
result := gdxdcdef.gdxSymbolGetComment(pgdx, SyNr, N, s);
end;

function  TGXFILE.gdxSymbolGetDomain(SyNr: Integer; var DomainIDs: TgdxUELIndex): Integer;
begin
result := gdxdcdef.gdxSymbolGetDomain(pgdx, SyNr, DomainIDs);
end;

function  TGXFILE.gdxSymbolInfo(SyNr: Integer; var AName: ShortString; var ADim: Integer; var ATyp: Integer): Integer;
begin
result := gdxdcdef.gdxSymbolInfo(pgdx, SyNr, AName, ADim, ATyp);
end;

function  TGXFILE.gdxSymbolInfoX(SyNr: Integer; var ACount: Integer; var AUserInfo: Integer; var AExplTxt: ShortString): Integer;
begin
result := gdxdcdef.gdxSymbolInfoX(pgdx, SyNr, ACount, AUserInfo, AExplTxt);
end;

function  TGXFILE.gdxSymbolSetDomain(const DomainIDs: TgdxStrIndex): Integer;
begin
result := gdxdcdef.gdxSymbolSetDomain(pgdx, DomainIDs);
end;

function  TGXFILE.gdxSystemInfo(var NrSy: Integer; var NrUel: Integer): Integer;
begin
result := gdxdcdef.gdxSystemInfo(pgdx, NrSy, NrUel);
end;

function  TGXFILE.gdxUELMaxLength: Integer;
begin
result := gdxdcdef.gdxUELMaxLength(pgdx);
end;

function  TGXFILE.gdxUELRegisterDone: Integer;
begin
result := gdxdcdef.gdxUELRegisterDone(pgdx);
end;

function  TGXFILE.gdxUELRegisterMap(UelNr: Integer; const Elem: ShortString): Integer;
begin
result := gdxdcdef.gdxUELRegisterMap(pgdx, UelNr, Elem);
end;

function  TGXFILE.gdxUELRegisterMapStart: Integer;
begin
result := gdxdcdef.gdxUELRegisterMapStart(pgdx);
end;

function  TGXFILE.gdxUELRegisterRaw(const Elem: ShortString): Integer;
begin
result := gdxdcdef.gdxUELRegisterRaw(pgdx, Elem);
end;

function  TGXFILE.gdxUELRegisterRawStart: Integer;
begin
result := gdxdcdef.gdxUELRegisterRawStart(pgdx);
end;

function  TGXFILE.gdxUELRegisterStr(const Elem: ShortString; var UelNr: Integer): Integer;
begin
result := gdxdcdef.gdxUELRegisterStr(pgdx, Elem, UelNr);
end;

function  TGXFILE.gdxUELRegisterStrStart: Integer;
begin
result := gdxdcdef.gdxUELRegisterStrStart(pgdx);
end;

function  TGXFILE.gdxUMFindUEL(const s: ShortString; var EN: Integer; var UMap: Integer): Integer;
begin
result := gdxdcdef.gdxUMFindUEL(pgdx, s, EN, UMap);
end;

function  TGXFILE.gdxUMUelGet(N: Integer; var s: ShortString; var UMap: Integer): Integer;
begin
result := gdxdcdef.gdxUMUelGet(pgdx, N, s, UMap);
end;

function  TGXFILE.gdxUMUelInfo(var NrElem: Integer; var HighMap: Integer): Integer;
begin
result := gdxdcdef.gdxUMUelInfo(pgdx, NrElem, HighMap);
end;

function  TGXFILE.gdxCurrentDim: Integer;
begin
result := gdxdcdef.gdxCurrentDim(pgdx);
end;

end.
