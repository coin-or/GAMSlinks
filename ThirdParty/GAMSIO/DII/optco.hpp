// optco.hpp
// Header file for C++-style (object) interface to the OPT library
// generated by apiwrapper

#if ! defined(_OPTCO_HPP_)
#     define  _OPTCO_HPP_

#include "optcc.h"
/* standard includes */
#include <string>
#include <cstring>

namespace GAMS {
class OPT
{
public:
  OPT ();                  // default constructor with out init call
  OPT (std::string &msg);  // New object with library loading
  OPT (const std::string &dirname, std::string &msg); // New object with library loading from dirname
  OPT (const std::string &dirname, const std::string &libname, std::string &msg); // New object with library loading from dirname and libraryname
  OPT (optHandle_t optHandle, std::string &msg); // constructor if we already have a optHandle
  OPT (optHandle_t optHandle, const std::string &dirname, std::string &msg); // constructor if we already have a optHandle
  ~OPT ();                 // destructor

  int Init (std::string &msg);
  int Init (const std::string &dirname, std::string &msg);
  int Init (const std::string &dirname, const std::string &libname, std::string &msg);
  int Init (optHandle_t optHandle, std::string &msg);
  int Init (optHandle_t optHandle, const std::string &dirname, std::string &msg);
  optHandle_t GetHandle ();
  inline int     ReadDefinition (const std::string &fn)
  {  return optReadDefinition (optHandle_, fn.c_str());}
  inline int     ReadParameterFile (const std::string &fn)
  {  return optReadParameterFile (optHandle_, fn.c_str());}
  inline void     ReadFromStr (const std::string &s)
  {  return optReadFromStr (optHandle_, s.c_str());}
  inline int     WriteParameterFile (const std::string &fn)
  {  return optWriteParameterFile (optHandle_, fn.c_str());}
  inline void     ClearMessages ()
  {  return optClearMessages (optHandle_);}
  inline void     AddMessage (const std::string &info)
  {  return optAddMessage (optHandle_, info.c_str());}
  inline void     GetMessage (int N, std::string &info, int &iType)
  {  return optGetMessage (optHandle_, N, tmpS0, &iType); info=tmpS0;}
  inline void     ResetAll ()
  {  return optResetAll (optHandle_);}
  inline void     ResetAllRecent ()
  {  return optResetAllRecent (optHandle_);}
  inline void     ResetRecentChanges ()
  {  return optResetRecentChanges (optHandle_);}
  inline void     ShowHelp (const std::string &HlpID)
  {  return optShowHelp (optHandle_, HlpID.c_str());}
  inline int     ResetNr (int ANr)
  {  return optResetNr (optHandle_, ANr);}
  inline int     FindStr (const std::string &AName, int &ANr, int &ARefNr)
  {  return optFindStr (optHandle_, AName.c_str(), &ANr, &ARefNr);}
  inline int     GetInfoNr (int ANr, int &ADefined, int &ADefinedR, int &ARefNr, int &ADataType, int &AOptType, int &ASubType)
  {  return optGetInfoNr (optHandle_, ANr, &ADefined, &ADefinedR, &ARefNr, &ADataType, &AOptType, &ASubType);}
  inline int     GetValuesNr (int ANr, std::string &ASName, int &AIVal, double &ADVal, std::string &ASVal)
  { int rc=optGetValuesNr (optHandle_, ANr, tmpS0, &AIVal, &ADVal, tmpS1); ASName=tmpS0; ASVal=tmpS1; return rc; }
  inline int     SetValuesNr (int ANr, int AIVal, double ADVal, const std::string &ASVal)
  {  return optSetValuesNr (optHandle_, ANr, AIVal, ADVal, ASVal.c_str());}
  inline int     SetValues2Nr (int ANr, int AIVal, double ADVal, const std::string &ASVal)
  {  return optSetValues2Nr (optHandle_, ANr, AIVal, ADVal, ASVal.c_str());}
  inline void     Version (std::string &sversion)
  {  return optVersion (optHandle_, tmpS0); sversion=tmpS0;}
  inline void     DefinitionFile (std::string &sfilename)
  {  return optDefinitionFile (optHandle_, tmpS0); sfilename=tmpS0;}
  inline int     GetFromAnyStrList (int idash, std::string &skey, std::string &sval)
  { int rc=optGetFromAnyStrList (optHandle_, idash, tmpS0, tmpS1); skey=tmpS0; sval=tmpS1; return rc; }
  inline int     GetFromListStr (const std::string &skey, std::string &sval)
  { int rc=optGetFromListStr (optHandle_, skey.c_str(), tmpS0); sval=tmpS0; return rc; }
  inline int     ListCountStr (const std::string &skey)
  {  return optListCountStr (optHandle_, skey.c_str());}
  inline int     ReadFromListStr (const std::string &skey, int iPos, std::string &sval)
  { int rc=optReadFromListStr (optHandle_, skey.c_str(), iPos, tmpS0); sval=tmpS0; return rc; }
  inline int     SynonymCount ()
  {  return optSynonymCount (optHandle_);}
  inline int     GetSynonym (int N, std::string &SSyn, std::string &SName)
  { int rc=optGetSynonym (optHandle_, N, tmpS0, tmpS1); SSyn=tmpS0; SName=tmpS1; return rc; }
  inline void     EchoSet (int V)
  {  return optEchoSet (optHandle_, V);}
  inline int     EOLOnlySet (int ival)
  {  return optEOLOnlySet (optHandle_, ival);}
  inline void     NoBoundsSet (int ival)
  {  return optNoBoundsSet (optHandle_, ival);}
  inline void     ErrorCount (int &iErrors, int &iWarnings)
  {  return optErrorCount (optHandle_, &iErrors, &iWarnings);}
  inline int     GetBoundsInt (int ANr, int &ilval, int &ihval, int &idval)
  {  return optGetBoundsInt (optHandle_, ANr, &ilval, &ihval, &idval);}
  inline int     GetBoundsDbl (int ANr, double &dlval, double &dhval, double &ddval)
  {  return optGetBoundsDbl (optHandle_, ANr, &dlval, &dhval, &ddval);}
  inline int     GetDefaultStr (int ANr, std::string &sval)
  { int rc=optGetDefaultStr (optHandle_, ANr, tmpS0); sval=tmpS0; return rc; }
  inline int     GetIntNr (int ANr, int &AIVal)
  {  return optGetIntNr (optHandle_, ANr, &AIVal);}
  inline int     GetInt2Nr (int ANr, int &AIVal)
  {  return optGetInt2Nr (optHandle_, ANr, &AIVal);}
  inline int     SetIntNr (int ANr, int AIVal)
  {  return optSetIntNr (optHandle_, ANr, AIVal);}
  inline int     SetInt2Nr (int ANr, int AIVal)
  {  return optSetInt2Nr (optHandle_, ANr, AIVal);}
  inline int     GetStrNr (int ANr, std::string &ASVal)
  { int rc=optGetStrNr (optHandle_, ANr, tmpS0); ASVal=tmpS0; return rc; }
  inline int     GetOptHelpNr (int ANr, std::string &AName, int &AHc, int &AGroup)
  { int rc=optGetOptHelpNr (optHandle_, ANr, tmpS0, &AHc, &AGroup); AName=tmpS0; return rc; }
  inline int     GetEnumHelp (int ANr, int AOrd, int &AHc, std::string &AHelpStr)
  { int rc=optGetEnumHelp (optHandle_, ANr, AOrd, &AHc, tmpS0); AHelpStr=tmpS0; return rc; }
  inline int     GetEnumStrNr (int ANr, std::string &ASVal, int &AOrd)
  { int rc=optGetEnumStrNr (optHandle_, ANr, tmpS0, &AOrd); ASVal=tmpS0; return rc; }
  inline int     GetEnumCount (int ANr, int &ACount)
  {  return optGetEnumCount (optHandle_, ANr, &ACount);}
  inline int     GetEnumValue (int ANr, int AOrd, int &AValInt, std::string &AValStr)
  { int rc=optGetEnumValue (optHandle_, ANr, AOrd, &AValInt, tmpS0); AValStr=tmpS0; return rc; }
  inline int     GetStr2Nr (int ANr, std::string &ASVal)
  { int rc=optGetStr2Nr (optHandle_, ANr, tmpS0); ASVal=tmpS0; return rc; }
  inline int     SetStrNr (int ANr, const std::string &ASVal)
  {  return optSetStrNr (optHandle_, ANr, ASVal.c_str());}
  inline int     SetStr2Nr (int ANr, const std::string &ASVal)
  {  return optSetStr2Nr (optHandle_, ANr, ASVal.c_str());}
  inline int     GetDblNr (int ANr, double &ADVal)
  {  return optGetDblNr (optHandle_, ANr, &ADVal);}
  inline int     GetDbl2Nr (int ANr, double &ADVal)
  {  return optGetDbl2Nr (optHandle_, ANr, &ADVal);}
  inline int     SetDblNr (int ANr, double ADVal)
  {  return optSetDblNr (optHandle_, ANr, ADVal);}
  inline int     SetDbl2Nr (int ANr, double ADVal)
  {  return optSetDbl2Nr (optHandle_, ANr, ADVal);}
  inline int     GetValStr (const std::string &AName, std::string &ASVal)
  { int rc=optGetValStr (optHandle_, AName.c_str(), tmpS0); ASVal=tmpS0; return rc; }
  inline int     GetVal2Str (const std::string &AName, std::string &ASVal)
  { int rc=optGetVal2Str (optHandle_, AName.c_str(), tmpS0); ASVal=tmpS0; return rc; }
  inline int     GetNameNr (int ANr, std::string &ASName)
  { int rc=optGetNameNr (optHandle_, ANr, tmpS0); ASName=tmpS0; return rc; }
  inline int     GetDefinedNr (int ANr, int &AIVal)
  {  return optGetDefinedNr (optHandle_, ANr, &AIVal);}
  inline int     GetHelpNr (int ANr, std::string &ASOpt, std::string &ASHelp)
  { int rc=optGetHelpNr (optHandle_, ANr, tmpS0, tmpS1); ASOpt=tmpS0; ASHelp=tmpS1; return rc; }
  inline int     GetGroupNr (int ANr, std::string &AName, int &AGroup, int &AHc, std::string &AHelp)
  { int rc=optGetGroupNr (optHandle_, ANr, tmpS0, &AGroup, &AHc, tmpS1); AName=tmpS0; AHelp=tmpS1; return rc; }
  inline int     GetGroupGrpNr (int AGroup)
  {  return optGetGroupGrpNr (optHandle_, AGroup);}
  inline int     GetOptGroupNr (int ANr)
  {  return optGetOptGroupNr (optHandle_, ANr);}
  inline int     GetDotOptNr (int ANr, std::string &AName, int &AObjNr, int &ADim, double &AValue)
  { int rc=optGetDotOptNr (optHandle_, ANr, tmpS0, &AObjNr, &ADim, &AValue); AName=tmpS0; return rc; }
  inline int     GetDotOptUel (int ANr, int ADim, std::string &AUEL)
  { int rc=optGetDotOptUel (optHandle_, ANr, ADim, tmpS0); AUEL=tmpS0; return rc; }
  inline int     GetIndicatorNr (int ANr, std::string &EquName, std::string &VarName, int &EquDim, int &VarDim, int &AValue)
  { int rc=optGetIndicatorNr (optHandle_, ANr, tmpS0, tmpS1, &EquDim, &VarDim, &AValue); EquName=tmpS0; VarName=tmpS1; return rc; }
  inline int     GetEquIndicatorNr (int ANr, int ADim, std::string &AIndex)
  { int rc=optGetEquIndicatorNr (optHandle_, ANr, ADim, tmpS0); AIndex=tmpS0; return rc; }
  inline int     GetVarIndicatorNr (int ANr, int ADim, std::string &AIndex)
  { int rc=optGetVarIndicatorNr (optHandle_, ANr, ADim, tmpS0); AIndex=tmpS0; return rc; }
  inline int     IndicatorCount (int &ANrErrors)
  {  return optIndicatorCount (optHandle_, &ANrErrors);}
  inline int     DotOptCount (int &ANrErrors)
  {  return optDotOptCount (optHandle_, &ANrErrors);}
  inline int     SetRefNr (int ANr, int AValue)
  {  return optSetRefNr (optHandle_, ANr, AValue);}
  inline int     SetRefNrStr (const std::string &AOpt, int AValue)
  {  return optSetRefNrStr (optHandle_, AOpt.c_str(), AValue);}
  inline int     GetConstName (int cgroup, int cindex, std::string &cname)
  { int rc=optGetConstName (optHandle_, cgroup, cindex, tmpS0); cname=tmpS0; return rc; }
  inline int     GetTypeName (int TNr, std::string &sTName)
  { int rc=optGetTypeName (optHandle_, TNr, tmpS0); sTName=tmpS0; return rc; }
  inline int     LookUp (const std::string &AOpt)
  {  return optLookUp (optHandle_, AOpt.c_str());}
  inline void     ReadFromPChar (char *p)
  {  return optReadFromPChar (optHandle_, p);}
  inline int     Count()  { return optCount (optHandle_); }
  inline int     MessageCount()  { return optMessageCount (optHandle_); }
  inline int     GroupCount()  { return optGroupCount (optHandle_); }
  inline int     RecentEnabled()  { return optRecentEnabled (optHandle_); }
  inline void    RecentEnabledSet(int  x)  { optRecentEnabledSet (optHandle_, x); }
  static int libraryLoad(char *errBuf, int errBufLen);

 private:
  optHandle_t optHandle_;
  int extHandle;
  static int numInst;
  static int isLoaded;
  static int optGetReady (std::string& msg);
  static int optGetReady (const std::string& dir, std::string& msg);
  void create();
  void destroy();
  char tmpS0[256], tmpS1[256];
};
};
#endif /* #if ! defined(_OPTCO_HPP_) */
