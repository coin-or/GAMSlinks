' visual basic for applications procedure wrapper generated by generated by apiwrapper

public const dt_set   = 0  'gdxsytype
public const dt_par   = 1  'gdxsytype
public const dt_var   = 2  'gdxsytype
public const dt_equ   = 3  'gdxsytype
public const dt_alias = 4  'gdxsytype

public const sv_valund  = 0  'gdxspecvalue
public const sv_valna   = 1  'gdxspecvalue
public const sv_valpin  = 2  'gdxspecvalue
public const sv_valmin  = 3  'gdxspecvalue
public const sv_valeps  = 4  'gdxspecvalue
public const sv_normal  = 5  'gdxspecvalue
public const sv_acronym = 6  'gdxspecvalue
public const gms_maxdim as integer = 19
public const gms_val_max as integer = 6
public const gms_svidx_max as integer = 4

private type string255
   s(255) as byte
end type
public declare sub gdxsetloadpath lib "gdxdclib" (byval s as string)
public declare sub gdxgetloadpath lib "gdxdclib" (byval s as string)

public  declare function gdxacronymcount lib "gdxdclib" (byval pgdx as long) as long
private declare function dll_gdxacronymgetinfo lib "gdxdclib" alias "gdxacronymgetinfo" (byval pgdx as long,byval n as long,byref aname as byte,byref atext as byte,byref indx as long) as long
public  declare function gdxacronymindex lib "gdxdclib" (byval pgdx as long,byval v as double) as long
private declare function dll_gdxacronymname lib "gdxdclib" alias "gdxacronymname" (byval pgdx as long,byval v as double,byref aname as byte) as long
private declare function dll_gdxacronymsetinfo lib "gdxdclib" alias "gdxacronymsetinfo" (byval pgdx as long,byval n as long,byref aname as byte,byref atext as byte,byval indx as long) as long
public  declare function gdxacronymvalue lib "gdxdclib" (byval pgdx as long,byval indx as long) as double
private declare function dll_gdxaddalias lib "gdxdclib" alias "gdxaddalias" (byval pgdx as long,byref aname1 as byte,byref aname2 as byte) as long
private declare function dll_gdxaddsettext lib "gdxdclib" alias "gdxaddsettext" (byval pgdx as long,byref s as byte,byref n as long) as long
public  declare function gdxclose lib "gdxdclib" (byval pgdx as long) as long
public  declare function gdxdataerrorcount lib "gdxdclib" (byval pgdx as long) as long
private declare function dll_gdxdataerrorrecord lib "gdxdclib" alias "gdxdataerrorrecord" (byval pgdx as long,byval rn as long,byref aelements as long,byref avals as double) as long
public  declare function gdxdatareaddone lib "gdxdclib" (byval pgdx as long) as long
private declare function dll_gdxdatareadfilteredstart lib "gdxdclib" alias "gdxdatareadfilteredstart" (byval pgdx as long,byval synr as long,byref adomainnrs as long,byref nrrecs as long) as long
private declare function dll_gdxdatareadmap lib "gdxdclib" alias "gdxdatareadmap" (byval pgdx as long,byval rn as long,byref aelements as long,byref avals as double,byref afdim as long) as long
public  declare function gdxdatareadmapstart lib "gdxdclib" (byval pgdx as long,byval synr as long,byref nrrecs as long) as long
private declare function dll_gdxdatareadraw lib "gdxdclib" alias "gdxdatareadraw" (byval pgdx as long,byref aelements as long,byref avals as double,byref afdim as long) as long
public  declare function gdxdatareadrawstart lib "gdxdclib" (byval pgdx as long,byval synr as long,byref nrrecs as long) as long
' private declare function dll_gdxdatareadslice lib "gdxdclib" alias "gdxdatareadslice" (byval pgdx as long,byref afiltelements as byte,byref adim as long,byval dp  *** function pointer not supported *** ) as long
private declare function dll_gdxdatareadslicestart lib "gdxdclib" alias "gdxdatareadslicestart" (byval pgdx as long,byval asynr as long,byref anrelems as long) as long
private declare function dll_gdxdatareadstr lib "gdxdclib" alias "gdxdatareadstr" (byval pgdx as long,byref astrelements as byte,byref avals as double,byref afdim as long) as long
public  declare function gdxdatareadstrstart lib "gdxdclib" (byval pgdx as long,byval synr as long,byref nrrecs as long) as long
private declare function dll_gdxdatasliceuels lib "gdxdclib" alias "gdxdatasliceuels" (byval pgdx as long,byref aindx as long,byref auels as byte) as long
public  declare function gdxdatawritedone lib "gdxdclib" (byval pgdx as long) as long
private declare function dll_gdxdatawritemap lib "gdxdclib" alias "gdxdatawritemap" (byval pgdx as long,byref aelements as long,byref avals as double) as long
private declare function dll_gdxdatawritemapstart lib "gdxdclib" alias "gdxdatawritemapstart" (byval pgdx as long,byref aname as byte,byref atext as byte,byval adim as long,byval atype as long,byval auserinfo as long) as long
private declare function dll_gdxdatawriteraw lib "gdxdclib" alias "gdxdatawriteraw" (byval pgdx as long,byref aelements as long,byref avals as double) as long
private declare function dll_gdxdatawriterawstart lib "gdxdclib" alias "gdxdatawriterawstart" (byval pgdx as long,byref aname as byte,byref atext as byte,byval adim as long,byval atype as long,byval auserinfo as long) as long
private declare function dll_gdxdatawritestr lib "gdxdclib" alias "gdxdatawritestr" (byval pgdx as long,byref astrelements as byte,byref avals as double) as long
private declare function dll_gdxdatawritestrstart lib "gdxdclib" alias "gdxdatawritestrstart" (byval pgdx as long,byref aname as byte,byref atext as byte,byval adim as long,byval atype as long,byval auserinfo as long) as long
private declare function dll_gdxgetdllversion lib "gdxdclib" alias "gdxgetdllversion" (byval pgdx as long,byref v as byte) as long
public  declare function gdxerrorcount lib "gdxdclib" (byval pgdx as long) as long
private declare function dll_gdxerrorstr lib "gdxdclib" alias "gdxerrorstr" (byval pgdx as long,byval n as long,byref s as byte) as long
public  declare function gdxfileinfo lib "gdxdclib" (byval pgdx as long,byref filever as long,byref comprlev as long) as long
private declare function dll_gdxfileversion lib "gdxdclib" alias "gdxfileversion" (byval pgdx as long,byref filestr as byte,byref producestr as byte) as long
public  declare function gdxfilterexists lib "gdxdclib" (byval pgdx as long,byval n as long) as long
public  declare function gdxfilterregister lib "gdxdclib" (byval pgdx as long,byval v as long) as long
public  declare function gdxfilterregisterdone lib "gdxdclib" (byval pgdx as long) as long
public  declare function gdxfilterregisterstart lib "gdxdclib" (byval pgdx as long,byval nr as long) as long
private declare function dll_gdxfindsymbol lib "gdxdclib" alias "gdxfindsymbol" (byval pgdx as long,byref aname as byte,byref aix as long) as long
private declare function dll_gdxgetelemtext lib "gdxdclib" alias "gdxgetelemtext" (byval pgdx as long,byval n as long,byref s as byte,byref node as long) as long
public  declare function gdxgetlasterror lib "gdxdclib" (byval pgdx as long) as long
private declare function dll_gdxgetspecialvalues lib "gdxdclib" alias "gdxgetspecialvalues" (byval pgdx as long,byref avals as double) as long
private declare function dll_gdxgetuel lib "gdxdclib" alias "gdxgetuel" (byval pgdx as long,byval uelnr as long,byref s as byte) as long
public  declare function gdxmapvalue lib "gdxdclib" (byval pgdx as long,byval d as double,byref sv as long) as long
private declare function dll_gdxopenread lib "gdxdclib" alias "gdxopenread" (byval pgdx as long,byref afn as byte,byref errnr as long) as long
private declare function dll_gdxopenwrite lib "gdxdclib" alias "gdxopenwrite" (byval pgdx as long,byref afn as byte,byref aproducer as byte,byref errnr as long) as long
private declare function dll_gdxopenwriteex lib "gdxdclib" alias "gdxopenwriteex" (byval pgdx as long,byref afn as byte,byref aproducer as byte,byval compr as long,byref errnr as long) as long
public  declare function gdxresetspecialvalues lib "gdxdclib" (byval pgdx as long) as long
public  declare function gdxsethastext lib "gdxdclib" (byval pgdx as long,byval n as long) as long
private declare function dll_gdxsetreadspecialvalues lib "gdxdclib" alias "gdxsetreadspecialvalues" (byval pgdx as long,byref avals as double) as long
private declare function dll_gdxsetspecialvalues lib "gdxdclib" alias "gdxsetspecialvalues" (byval pgdx as long,byref avals as double) as long
public  declare function gdxsettextnodenr lib "gdxdclib" (byval pgdx as long,byval n as long,byval node as long) as long
private declare function dll_gdxsettracelevel lib "gdxdclib" alias "gdxsettracelevel" (byval pgdx as long,byval n as long,byref s as byte) as long
private declare function dll_gdxsymbindxmaxlength lib "gdxdclib" alias "gdxsymbindxmaxlength" (byval pgdx as long,byval synr as long,byref diminfo as long) as long
public  declare function gdxsymbmaxlength lib "gdxdclib" (byval pgdx as long) as long
private declare function dll_gdxsymboladdcomment lib "gdxdclib" alias "gdxsymboladdcomment" (byval pgdx as long,byval synr as long,byref s as byte) as long
private declare function dll_gdxsymbolgetcomment lib "gdxdclib" alias "gdxsymbolgetcomment" (byval pgdx as long,byval synr as long,byval n as long,byref s as byte) as long
private declare function dll_gdxsymbolgetdomain lib "gdxdclib" alias "gdxsymbolgetdomain" (byval pgdx as long,byval synr as long,byref domainids as long) as long
private declare function dll_gdxsymbolinfo lib "gdxdclib" alias "gdxsymbolinfo" (byval pgdx as long,byval synr as long,byref aname as byte,byref adim as long,byref atyp as long) as long
private declare function dll_gdxsymbolinfox lib "gdxdclib" alias "gdxsymbolinfox" (byval pgdx as long,byval synr as long,byref acount as long,byref auserinfo as long,byref aexpltxt as byte) as long
private declare function dll_gdxsymbolsetdomain lib "gdxdclib" alias "gdxsymbolsetdomain" (byval pgdx as long,byref domainids as byte) as long
public  declare function gdxsysteminfo lib "gdxdclib" (byval pgdx as long,byref nrsy as long,byref nruel as long) as long
public  declare function gdxuelmaxlength lib "gdxdclib" (byval pgdx as long) as long
public  declare function gdxuelregisterdone lib "gdxdclib" (byval pgdx as long) as long
private declare function dll_gdxuelregistermap lib "gdxdclib" alias "gdxuelregistermap" (byval pgdx as long,byval uelnr as long,byref elem as byte) as long
public  declare function gdxuelregistermapstart lib "gdxdclib" (byval pgdx as long) as long
private declare function dll_gdxuelregisterraw lib "gdxdclib" alias "gdxuelregisterraw" (byval pgdx as long,byref elem as byte) as long
public  declare function gdxuelregisterrawstart lib "gdxdclib" (byval pgdx as long) as long
private declare function dll_gdxuelregisterstr lib "gdxdclib" alias "gdxuelregisterstr" (byval pgdx as long,byref elem as byte,byref uelnr as long) as long
public  declare function gdxuelregisterstrstart lib "gdxdclib" (byval pgdx as long) as long
private declare function dll_gdxumfinduel lib "gdxdclib" alias "gdxumfinduel" (byval pgdx as long,byref s as byte,byref en as long,byref umap as long) as long
private declare function dll_gdxumuelget lib "gdxdclib" alias "gdxumuelget" (byval pgdx as long,byval n as long,byref s as byte,byref umap as long) as long
public  declare function gdxumuelinfo lib "gdxdclib" (byval pgdx as long,byref nrelem as long,byref highmap as long) as long
public  declare function gdxcurrentdim lib "gdxdclib" (byval pgdx as long) as long


private declare function xcreate lib "gdxdclib" (byref pgdx as long) as boolean
private declare function xfree   lib "gdxdclib" (byref pgdx as long) as boolean

public function gdxcreate(byref pgdx as long, byref msgbuf as string) as boolean
   gdxcreate = xcreate(pgdx)
end function

public function gdxcreatex(byref pgdx as long, byref msgbuf as string) as boolean
   gdxcreatex = xcreate(pgdx)
end function

public function gdxcreated(byref pgdx as long, byval dirname as string, byref msgbuf as string) as boolean
   gdxcreated = xcreate(pgdx)
end function

public function gdxcreatel(byref pgdx as long, byval libname as string, byref msgbuf as string) as boolean
   gdxcreatel = xcreate(pgdx)
end function

public function gdxfree(byref pgdx as long) as boolean
   gdxfree = xfree(pgdx)
end function

private sub convertbas2pas(s as string, b() as byte)
    dim i as integer
    dim slen as integer
    slen = len(s)
    if (slen > ubound(b)) then
        slen = ubound(b)
    end if
    b(0) = slen
    for i = 1 to slen
        b(i) = asc(mid(s, i, 1))
    next i
end sub

private sub convertpas2bas(b() as byte, s as string)
    dim i as integer
    dim slen as integer
    slen = b(0)
    s = ""
    for i = 1 to slen
        s = s & chr(b(i))
    next i
end sub

public function gdxacronymgetinfo(pgdx as long,n as long,aname as string,atext as string,indx as long) as long
   dim cpy_aname as string255
   dim cpy_atext as string255
   gdxacronymgetinfo = dll_gdxacronymgetinfo(pgdx,n,cpy_aname.s(0),cpy_atext.s(0),indx)
   call convertpas2bas(cpy_aname.s,aname)
   call convertpas2bas(cpy_atext.s,atext)
end function

public function gdxacronymname(pgdx as long,v as double,aname as string) as long
   dim cpy_aname as string255
   gdxacronymname = dll_gdxacronymname(pgdx,v,cpy_aname.s(0))
   call convertpas2bas(cpy_aname.s,aname)
end function

public function gdxacronymsetinfo(pgdx as long,n as long,aname as string,atext as string,indx as long) as long
   dim cpy_aname as string255
   dim cpy_atext as string255
   call convertbas2pas(aname, cpy_aname.s)
   call convertbas2pas(atext, cpy_atext.s)
   gdxacronymsetinfo = dll_gdxacronymsetinfo(pgdx,n,cpy_aname.s(0),cpy_atext.s(0),indx)
end function

public function gdxaddalias(pgdx as long,aname1 as string,aname2 as string) as long
   dim cpy_aname1 as string255
   dim cpy_aname2 as string255
   call convertbas2pas(aname1, cpy_aname1.s)
   call convertbas2pas(aname2, cpy_aname2.s)
   gdxaddalias = dll_gdxaddalias(pgdx,cpy_aname1.s(0),cpy_aname2.s(0))
end function

public function gdxaddsettext(pgdx as long,s as string,n as long) as long
   dim cpy_s as string255
   call convertbas2pas(s, cpy_s.s)
   gdxaddsettext = dll_gdxaddsettext(pgdx,cpy_s.s(0),n)
end function

public function gdxdataerrorrecord(pgdx as long,rn as long,aelements() as long,avals() as double) as long
   gdxdataerrorrecord = dll_gdxdataerrorrecord(pgdx,rn,aelements(0),avals(0))
end function

public function gdxdatareadfilteredstart(pgdx as long,synr as long,adomainnrs() as long,nrrecs as long) as long
   gdxdatareadfilteredstart = dll_gdxdatareadfilteredstart(pgdx,synr,adomainnrs(0),nrrecs)
end function

public function gdxdatareadmap(pgdx as long,rn as long,aelements() as long,avals() as double,afdim as long) as long
   gdxdatareadmap = dll_gdxdatareadmap(pgdx,rn,aelements(0),avals(0),afdim)
end function

public function gdxdatareadraw(pgdx as long,aelements() as long,avals() as double,afdim as long) as long
   gdxdatareadraw = dll_gdxdatareadraw(pgdx,aelements(0),avals(0),afdim)
end function

public function gdxdatareadslicestart(pgdx as long,asynr as long,anrelems() as long) as long
   gdxdatareadslicestart = dll_gdxdatareadslicestart(pgdx,asynr,anrelems(0))
end function

public function gdxdatareadstr(pgdx as long,astrelements() as string,avals() as double,afdim as long) as long
   dim cpy_astrelements(gms_maxdim) as string255
   dim i_astrelements as integer
   gdxdatareadstr = dll_gdxdatareadstr(pgdx,cpy_astrelements(0).s(0),avals(0),afdim)
   for i_astrelements = 0 to gms_maxdim
      call convertpas2bas(cpy_astrelements(i_astrelements).s,astrelements(i_astrelements))
   next i_astrelements
end function

public function gdxdatasliceuels(pgdx as long,aindx() as long,auels() as string) as long
   dim cpy_auels(gms_maxdim) as string255
   dim i_auels as integer
   gdxdatasliceuels = dll_gdxdatasliceuels(pgdx,aindx(0),cpy_auels(0).s(0))
   for i_auels = 0 to gms_maxdim
      call convertpas2bas(cpy_auels(i_auels).s,auels(i_auels))
   next i_auels
end function

public function gdxdatawritemap(pgdx as long,aelements() as long,avals() as double) as long
   gdxdatawritemap = dll_gdxdatawritemap(pgdx,aelements(0),avals(0))
end function

public function gdxdatawritemapstart(pgdx as long,aname as string,atext as string,adim as long,atype as long,auserinfo as long) as long
   dim cpy_aname as string255
   dim cpy_atext as string255
   call convertbas2pas(aname, cpy_aname.s)
   call convertbas2pas(atext, cpy_atext.s)
   gdxdatawritemapstart = dll_gdxdatawritemapstart(pgdx,cpy_aname.s(0),cpy_atext.s(0),adim,atype,auserinfo)
end function

public function gdxdatawriteraw(pgdx as long,aelements() as long,avals() as double) as long
   gdxdatawriteraw = dll_gdxdatawriteraw(pgdx,aelements(0),avals(0))
end function

public function gdxdatawriterawstart(pgdx as long,aname as string,atext as string,adim as long,atype as long,auserinfo as long) as long
   dim cpy_aname as string255
   dim cpy_atext as string255
   call convertbas2pas(aname, cpy_aname.s)
   call convertbas2pas(atext, cpy_atext.s)
   gdxdatawriterawstart = dll_gdxdatawriterawstart(pgdx,cpy_aname.s(0),cpy_atext.s(0),adim,atype,auserinfo)
end function

public function gdxdatawritestr(pgdx as long,astrelements() as string,avals() as double) as long
   dim cpy_astrelements(gms_maxdim) as string255
   dim i_astrelements as integer
   for i_astrelements = 0 to gms_maxdim
      call convertbas2pas(astrelements(i_astrelements), cpy_astrelements(i_astrelements).s)
   next i_astrelements
   gdxdatawritestr = dll_gdxdatawritestr(pgdx,cpy_astrelements(0).s(0),avals(0))
end function

public function gdxdatawritestrstart(pgdx as long,aname as string,atext as string,adim as long,atype as long,auserinfo as long) as long
   dim cpy_aname as string255
   dim cpy_atext as string255
   call convertbas2pas(aname, cpy_aname.s)
   call convertbas2pas(atext, cpy_atext.s)
   gdxdatawritestrstart = dll_gdxdatawritestrstart(pgdx,cpy_aname.s(0),cpy_atext.s(0),adim,atype,auserinfo)
end function

public function gdxgetdllversion(pgdx as long,v as string) as long
   dim cpy_v as string255
   gdxgetdllversion = dll_gdxgetdllversion(pgdx,cpy_v.s(0))
   call convertpas2bas(cpy_v.s,v)
end function

public function gdxerrorstr(pgdx as long,n as long,s as string) as long
   dim cpy_s as string255
   gdxerrorstr = dll_gdxerrorstr(pgdx,n,cpy_s.s(0))
   call convertpas2bas(cpy_s.s,s)
end function

public function gdxfileversion(pgdx as long,filestr as string,producestr as string) as long
   dim cpy_filestr as string255
   dim cpy_producestr as string255
   gdxfileversion = dll_gdxfileversion(pgdx,cpy_filestr.s(0),cpy_producestr.s(0))
   call convertpas2bas(cpy_filestr.s,filestr)
   call convertpas2bas(cpy_producestr.s,producestr)
end function

public function gdxfindsymbol(pgdx as long,aname as string,aix as long) as long
   dim cpy_aname as string255
   call convertbas2pas(aname, cpy_aname.s)
   gdxfindsymbol = dll_gdxfindsymbol(pgdx,cpy_aname.s(0),aix)
end function

public function gdxgetelemtext(pgdx as long,n as long,s as string,node as long) as long
   dim cpy_s as string255
   gdxgetelemtext = dll_gdxgetelemtext(pgdx,n,cpy_s.s(0),node)
   call convertpas2bas(cpy_s.s,s)
end function

public function gdxgetspecialvalues(pgdx as long,avals() as double) as long
   gdxgetspecialvalues = dll_gdxgetspecialvalues(pgdx,avals(0))
end function

public function gdxgetuel(pgdx as long,uelnr as long,s as string) as long
   dim cpy_s as string255
   gdxgetuel = dll_gdxgetuel(pgdx,uelnr,cpy_s.s(0))
   call convertpas2bas(cpy_s.s,s)
end function

public function gdxopenread(pgdx as long,afn as string,errnr as long) as long
   dim cpy_afn as string255
   call convertbas2pas(afn, cpy_afn.s)
   gdxopenread = dll_gdxopenread(pgdx,cpy_afn.s(0),errnr)
end function

public function gdxopenwrite(pgdx as long,afn as string,aproducer as string,errnr as long) as long
   dim cpy_afn as string255
   dim cpy_aproducer as string255
   call convertbas2pas(afn, cpy_afn.s)
   call convertbas2pas(aproducer, cpy_aproducer.s)
   gdxopenwrite = dll_gdxopenwrite(pgdx,cpy_afn.s(0),cpy_aproducer.s(0),errnr)
end function

public function gdxopenwriteex(pgdx as long,afn as string,aproducer as string,compr as long,errnr as long) as long
   dim cpy_afn as string255
   dim cpy_aproducer as string255
   call convertbas2pas(afn, cpy_afn.s)
   call convertbas2pas(aproducer, cpy_aproducer.s)
   gdxopenwriteex = dll_gdxopenwriteex(pgdx,cpy_afn.s(0),cpy_aproducer.s(0),compr,errnr)
end function

public function gdxsetreadspecialvalues(pgdx as long,avals() as double) as long
   gdxsetreadspecialvalues = dll_gdxsetreadspecialvalues(pgdx,avals(0))
end function

public function gdxsetspecialvalues(pgdx as long,avals() as double) as long
   gdxsetspecialvalues = dll_gdxsetspecialvalues(pgdx,avals(0))
end function

public function gdxsettracelevel(pgdx as long,n as long,s as string) as long
   dim cpy_s as string255
   call convertbas2pas(s, cpy_s.s)
   gdxsettracelevel = dll_gdxsettracelevel(pgdx,n,cpy_s.s(0))
end function

public function gdxsymbindxmaxlength(pgdx as long,synr as long,diminfo() as long) as long
   gdxsymbindxmaxlength = dll_gdxsymbindxmaxlength(pgdx,synr,diminfo(0))
end function

public function gdxsymboladdcomment(pgdx as long,synr as long,s as string) as long
   dim cpy_s as string255
   call convertbas2pas(s, cpy_s.s)
   gdxsymboladdcomment = dll_gdxsymboladdcomment(pgdx,synr,cpy_s.s(0))
end function

public function gdxsymbolgetcomment(pgdx as long,synr as long,n as long,s as string) as long
   dim cpy_s as string255
   gdxsymbolgetcomment = dll_gdxsymbolgetcomment(pgdx,synr,n,cpy_s.s(0))
   call convertpas2bas(cpy_s.s,s)
end function

public function gdxsymbolgetdomain(pgdx as long,synr as long,domainids() as long) as long
   gdxsymbolgetdomain = dll_gdxsymbolgetdomain(pgdx,synr,domainids(0))
end function

public function gdxsymbolinfo(pgdx as long,synr as long,aname as string,adim as long,atyp as long) as long
   dim cpy_aname as string255
   gdxsymbolinfo = dll_gdxsymbolinfo(pgdx,synr,cpy_aname.s(0),adim,atyp)
   call convertpas2bas(cpy_aname.s,aname)
end function

public function gdxsymbolinfox(pgdx as long,synr as long,acount as long,auserinfo as long,aexpltxt as string) as long
   dim cpy_aexpltxt as string255
   gdxsymbolinfox = dll_gdxsymbolinfox(pgdx,synr,acount,auserinfo,cpy_aexpltxt.s(0))
   call convertpas2bas(cpy_aexpltxt.s,aexpltxt)
end function

public function gdxsymbolsetdomain(pgdx as long,domainids() as string) as long
   dim cpy_domainids(gms_maxdim) as string255
   dim i_domainids as integer
   for i_domainids = 0 to gms_maxdim
      call convertbas2pas(domainids(i_domainids), cpy_domainids(i_domainids).s)
   next i_domainids
   gdxsymbolsetdomain = dll_gdxsymbolsetdomain(pgdx,cpy_domainids(0).s(0))
end function

public function gdxuelregistermap(pgdx as long,uelnr as long,elem as string) as long
   dim cpy_elem as string255
   call convertbas2pas(elem, cpy_elem.s)
   gdxuelregistermap = dll_gdxuelregistermap(pgdx,uelnr,cpy_elem.s(0))
end function

public function gdxuelregisterraw(pgdx as long,elem as string) as long
   dim cpy_elem as string255
   call convertbas2pas(elem, cpy_elem.s)
   gdxuelregisterraw = dll_gdxuelregisterraw(pgdx,cpy_elem.s(0))
end function

public function gdxuelregisterstr(pgdx as long,elem as string,uelnr as long) as long
   dim cpy_elem as string255
   call convertbas2pas(elem, cpy_elem.s)
   gdxuelregisterstr = dll_gdxuelregisterstr(pgdx,cpy_elem.s(0),uelnr)
end function

public function gdxumfinduel(pgdx as long,s as string,en as long,umap as long) as long
   dim cpy_s as string255
   call convertbas2pas(s, cpy_s.s)
   gdxumfinduel = dll_gdxumfinduel(pgdx,cpy_s.s(0),en,umap)
end function

public function gdxumuelget(pgdx as long,n as long,s as string,umap as long) as long
   dim cpy_s as string255
   gdxumuelget = dll_gdxumuelget(pgdx,n,cpy_s.s(0),umap)
   call convertpas2bas(cpy_s.s,s)
end function
