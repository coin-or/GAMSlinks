// C++ code generated by apiwrapper

#include <stdio.h>
#include <assert.h>
#include <errno.h>

#include "optco.hpp"
namespace GAMS {
void OPT::create()
{
        optHandle_ = (optHandle_t) 0;
        extHandle = 0; numInst++;
}

void OPT::destroy()
{

        numInst--;
        if (0 != optHandle_ && 0 == extHandle) {
           optFree(&optHandle_);
        }
}

// default constructor
// OPT::OPT ()
// {
//  int rc;
//  char errBuf[256];
//
//  optHandle_ = 0;
//  optGetReady();
//  assert(isLoaded);
//  rc = optCreate (&optHandle_);
//  assert(rc); // for now we are sloppy here
//  numInst++;
//}

// default constructor
OPT::OPT ()
{
  create();
}

// constructor
OPT::OPT (std::string &msg)
{
  create(); Init(msg);
}

// constructor
OPT::OPT (const std::string &dirname, std::string &msg)
{
  create(); Init(dirname,msg);
}

// constructor
OPT::OPT (const std::string &dirname, const std::string &libname, std::string &msg)
{
  create(); Init(dirname,libname,msg);
}

// constructor if we already have a optHandle
OPT::OPT (optHandle_t optHandle, std::string &msg)
{
  create(); Init(optHandle,msg);
}

// constructor if we already have a optHandle
OPT::OPT (optHandle_t optHandle, const std::string &dirname, std::string &msg)
{
  create(); Init(optHandle,dirname,msg);
}

// destructor
OPT::~OPT ()
{
  destroy();
}

// Init: return false on failure to load library, true on success
// if rc is non-NULL on input, it returns a bitmask of errors that occurred
int OPT::
Init (std::string &msg)
{
  char cmsg[257];
  int initresult = optCreate (&optHandle_, cmsg, sizeof(cmsg)); msg = cmsg;  return initresult;
} // Init(std::string &msg)

// Init: return false on failure to load library, true on success
// if rc is non-NULL on input, it returns a bitmask of errors that occurred
int OPT::
Init (const std::string &dirname, std::string &msg)
{
  char cmsg[257];
  int initresult = optCreateD (&optHandle_, dirname.c_str(), cmsg, sizeof(cmsg)); msg = cmsg; return initresult;
} // Init(const std::string &dirname; std::string &msg)

// Init: return false on failure to load library, true on success
// if rc is non-NULL on input, it returns a bitmask of errors that occurred
int OPT::
Init (const std::string &dirname, const std::string &libname, std::string &msg)
{
  char cmsg[257];
  std::string lib = dirname + libname;

  int initresult = optCreateL (&optHandle_, lib.c_str(), cmsg, sizeof(cmsg)); msg = cmsg; return initresult;
} // Init(const std::string &dirname; const std::string &libname; std::string &msg)

// Init: return false on failure to load library, true on success
// if rc is non-NULL on input, it returns a bitmask of errors that occurred

// Init: return false on failure to load library, true on success
// if rc is non-NULL on input, it returns a bitmask of errors that occurred
int OPT::
Init (optHandle_t optHandle, std::string &msg)
{
  int res;

  res = optGetReady (msg);
  if (res) {
     optHandle_ = optHandle;
     extHandle = 1;
  }
  return res;
} // Init(optHandle_t optHandle, std::string &msg)

// Init: return false on failure to load library, true on success
// if rc is non-NULL on input, it returns a bitmask of errors that occurred
int OPT::
Init (optHandle_t optHandle, const std::string &dirname, std::string &msg)
{
  int res;

  res = optGetReady (dirname, msg);
  if (res) {
    optHandle_ = optHandle;
    extHandle = 1;
  }
  return res;
} // Init(optHandle_t optHandle, const std::string &dirname, std::string &msg)


optHandle_t OPT::
GetHandle ()
{
  return optHandle_;
}

int OPT::
optGetReady (std::string& msg)
{
   if (! isLoaded) {
     char str[257]="";
     isLoaded = ::optGetReady(str, sizeof(str));
     msg = str;
   }
   return isLoaded;
}

int OPT::
optGetReady (const std::string& dir, std::string& msg)
{
   if (! isLoaded) {
     char str[257]="";
     isLoaded = ::optGetReadyD(dir.c_str(), str, sizeof(str));
     msg = str;
   }
   return isLoaded;
}

int OPT::numInst = 0;
int OPT::isLoaded = 0;
} // namespace GAMS
