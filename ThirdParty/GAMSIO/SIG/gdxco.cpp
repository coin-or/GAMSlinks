// C++ code generated by apiwrapper

#include <stdio.h>
#include <assert.h>
#include <errno.h>

#include "gdxco.hpp"
namespace GAMS {
void GDX::create()
{
        for (int i = 0 ; i < GMS_MAX_INDEX_DIM; ++i) {
                DPout[i] = new char[257];
        }
        gdxHandle_ = (gdxHandle_t) 0;
        extHandle = 0; numInst++;
}

void GDX::destroy()
{

        numInst--;
        for (int i = 0 ; i < GMS_MAX_INDEX_DIM; ++i) {
                delete[] DPout[i];
        }
        if (0 != gdxHandle_ && 0 == extHandle) {
           gdxFree(&gdxHandle_);
        }
}

// default constructor
// GDX::GDX ()
// {
//  int rc;
//  char errBuf[256];
//
//  gdxHandle_ = 0;
//  gdxGetReady();
//  assert(isLoaded);
//  rc = gdxCreate (&gdxHandle_);
//  assert(rc); // for now we are sloppy here
//  numInst++;
//}

// default constructor
GDX::GDX ()
{
  create();
}

// constructor
GDX::GDX (std::string &msg)
{
  create(); Init(msg);
}

// constructor
GDX::GDX (const std::string &dirname, std::string &msg)
{
  create(); Init(dirname,msg);
}

// constructor
GDX::GDX (const std::string &dirname, const std::string &libname, std::string &msg)
{
  create(); Init(dirname,libname,msg);
}

// constructor if we already have a gdxHandle
GDX::GDX (gdxHandle_t gdxHandle, std::string &msg)
{
  create(); Init(gdxHandle,msg);
}

// constructor if we already have a gdxHandle
GDX::GDX (gdxHandle_t gdxHandle, const std::string &dirname, std::string &msg)
{
  create(); Init(gdxHandle,dirname,msg);
}

// destructor
GDX::~GDX ()
{
  destroy();
}

// Init: return false on failure to load library, true on success
// if rc is non-NULL on input, it returns a bitmask of errors that occurred
int GDX::
Init (std::string &msg)
{
  char cmsg[257];
  int initresult = gdxCreate (&gdxHandle_, cmsg, sizeof(cmsg)); msg = cmsg;  return initresult;
} // Init(std::string &msg)

// Init: return false on failure to load library, true on success
// if rc is non-NULL on input, it returns a bitmask of errors that occurred
int GDX::
Init (const std::string &dirname, std::string &msg)
{
  char cmsg[257];
  int initresult = gdxCreateD (&gdxHandle_, dirname.c_str(), cmsg, sizeof(cmsg)); msg = cmsg; return initresult;
} // Init(const std::string &dirname; std::string &msg)

// Init: return false on failure to load library, true on success
// if rc is non-NULL on input, it returns a bitmask of errors that occurred
int GDX::
Init (const std::string &dirname, const std::string &libname, std::string &msg)
{
  char cmsg[257];
  std::string lib = dirname + libname;

  int initresult = gdxCreateL (&gdxHandle_, lib.c_str(), cmsg, sizeof(cmsg)); msg = cmsg; return initresult;
} // Init(const std::string &dirname; const std::string &libname; std::string &msg)

// Init: return false on failure to load library, true on success
// if rc is non-NULL on input, it returns a bitmask of errors that occurred

// Init: return false on failure to load library, true on success
// if rc is non-NULL on input, it returns a bitmask of errors that occurred
int GDX::
Init (gdxHandle_t gdxHandle, std::string &msg)
{
  int res;

  res = gdxGetReady (msg);
  if (res) {
     gdxHandle_ = gdxHandle;
     extHandle = 1;
  }
  return res;
} // Init(gdxHandle_t gdxHandle, std::string &msg)

// Init: return false on failure to load library, true on success
// if rc is non-NULL on input, it returns a bitmask of errors that occurred
int GDX::
Init (gdxHandle_t gdxHandle, const std::string &dirname, std::string &msg)
{
  int res;

  res = gdxGetReady (dirname, msg);
  if (res) {
    gdxHandle_ = gdxHandle;
    extHandle = 1;
  }
  return res;
} // Init(gdxHandle_t gdxHandle, const std::string &dirname, std::string &msg)


gdxHandle_t GDX::
GetHandle ()
{
  return gdxHandle_;
}

int GDX::
gdxGetReady (std::string& msg)
{
   if (! isLoaded) {
     char str[257]="";
     isLoaded = ::gdxGetReady(str, sizeof(str));
     msg = str;
   }
   return isLoaded;
}

int GDX::
gdxGetReady (const std::string& dir, std::string& msg)
{
   if (! isLoaded) {
     char str[257]="";
     isLoaded = ::gdxGetReadyD(dir.c_str(), str, sizeof(str));
     msg = str;
   }
   return isLoaded;
}

int GDX::numInst = 0;
int GDX::isLoaded = 0;
} // namespace GAMS
