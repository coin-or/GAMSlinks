module gdxvbnet ' visual basic .net  procedure wrapper generated by generated by apiwrapper


public delegate sub tdatastoreproc(byval indx as intptr,byval vals as intptr)

public  declare sub gdxsetloadpath lib "gdxdclib" (byval s as string)
private declare sub dll_gdxgetloadpath lib "gdxdclib" alias "cgdxgetloadpath" (byref s as byte)

public  declare function gdxacronymcount lib "gdxdclib" (byval pgdx as intptr) as integer
private declare function dll_gdxacronymgetinfo lib "gdxdclib" alias "cgdxacronymgetinfo" (byval pgdx as intptr,byval n as integer,byref aname as byte,byref atext as byte,byref indx as integer) as integer
public  declare function gdxacronymindex lib "gdxdclib" (byval pgdx as intptr,byval v as double) as integer
private declare function dll_gdxacronymname lib "gdxdclib" alias "cgdxacronymname" (byval pgdx as intptr,byval v as double,byref aname as byte) as integer
public  declare function gdxacronymsetinfo lib "gdxdclib" alias "cgdxacronymsetinfo" (byval pgdx as intptr,byval n as integer,byval aname as string,byval atext as string,byval indx as integer) as integer
public  declare function gdxacronymvalue lib "gdxdclib" (byval pgdx as intptr,byval indx as integer) as double
public  declare function gdxaddalias lib "gdxdclib" alias "cgdxaddalias" (byval pgdx as intptr,byval aname1 as string,byval aname2 as string) as integer
public  declare function gdxaddsettext lib "gdxdclib" alias "cgdxaddsettext" (byval pgdx as intptr,byval s as string,byref n as integer) as integer
public  declare function gdxautoconvert lib "gdxdclib" (byval pgdx as intptr,byval nv as integer) as integer
public  declare function gdxclose lib "gdxdclib" (byval pgdx as intptr) as integer
public  declare function gdxdataerrorcount lib "gdxdclib" (byval pgdx as intptr) as integer
private declare function dll_gdxdataerrorrecord lib "gdxdclib" alias "gdxdataerrorrecord" (byval pgdx as intptr,byval rn as integer,byref aelements as integer,byref avals as double) as integer
public  declare function gdxdatareaddone lib "gdxdclib" (byval pgdx as intptr) as integer
private declare function dll_gdxdatareadfilteredstart lib "gdxdclib" alias "gdxdatareadfilteredstart" (byval pgdx as intptr,byval synr as integer,byref adomainnrs as integer,byref nrrecs as integer) as integer
private declare function dll_gdxdatareadmap lib "gdxdclib" alias "gdxdatareadmap" (byval pgdx as intptr,byval rn as integer,byref aelements as integer,byref avals as double,byref afdim as integer) as integer
public  declare function gdxdatareadmapstart lib "gdxdclib" (byval pgdx as intptr,byval synr as integer,byref nrrecs as integer) as integer
private declare function dll_gdxdatareadraw lib "gdxdclib" alias "gdxdatareadraw" (byval pgdx as intptr,byref aelements as integer,byref avals as double,byref afdim as integer) as integer
public  declare function gdxdatareadrawstart lib "gdxdclib" (byval pgdx as intptr,byval synr as integer,byref nrrecs as integer) as integer
private declare function dll_gdxdatareadslice lib "gdxdclib" alias "cgdxdatareadslice" (byval pgdx as intptr,byval afiltelements() as string,byref adim as integer,byval dp as tdatastoreproc) as integer
private declare function dll_gdxdatareadslicestart lib "gdxdclib" alias "gdxdatareadslicestart" (byval pgdx as intptr,byval asynr as integer,byref anrelems as integer) as integer
private declare function dll_gdxdatareadstr lib "gdxdclib" alias "bgdxdatareadstr" (byval pgdx as intptr,byref astrelements as byte,byref avals as double,byref afdim as integer) as integer
public  declare function gdxdatareadstrstart lib "gdxdclib" (byval pgdx as intptr,byval synr as integer,byref nrrecs as integer) as integer
private declare function dll_gdxdatasliceuels lib "gdxdclib" alias "bgdxdatasliceuels" (byval pgdx as intptr,byref aindx as integer,byref auels as byte) as integer
public  declare function gdxdatawritedone lib "gdxdclib" (byval pgdx as intptr) as integer
private declare function dll_gdxdatawritemap lib "gdxdclib" alias "gdxdatawritemap" (byval pgdx as intptr,byref aelements as integer,byref avals as double) as integer
public  declare function gdxdatawritemapstart lib "gdxdclib" alias "cgdxdatawritemapstart" (byval pgdx as intptr,byval aname as string,byval atext as string,byval adim as integer,byval atype as integer,byval auserinfo as integer) as integer
private declare function dll_gdxdatawriteraw lib "gdxdclib" alias "gdxdatawriteraw" (byval pgdx as intptr,byref aelements as integer,byref avals as double) as integer
public  declare function gdxdatawriterawstart lib "gdxdclib" alias "cgdxdatawriterawstart" (byval pgdx as intptr,byval aname as string,byval atext as string,byval adim as integer,byval atype as integer,byval auserinfo as integer) as integer
private declare function dll_gdxdatawritestr lib "gdxdclib" alias "cgdxdatawritestr" (byval pgdx as intptr,byval astrelements() as string,byref avals as double) as integer
public  declare function gdxdatawritestrstart lib "gdxdclib" alias "cgdxdatawritestrstart" (byval pgdx as intptr,byval aname as string,byval atext as string,byval adim as integer,byval atype as integer,byval auserinfo as integer) as integer
private declare function dll_gdxgetdllversion lib "gdxdclib" alias "cgdxgetdllversion" (byval pgdx as intptr,byref v as byte) as integer
public  declare function gdxerrorcount lib "gdxdclib" (byval pgdx as intptr) as integer
private declare function dll_gdxerrorstr lib "gdxdclib" alias "cgdxerrorstr" (byval pgdx as intptr,byval n as integer,byref s as byte) as integer
public  declare function gdxfileinfo lib "gdxdclib" (byval pgdx as intptr,byref filever as integer,byref comprlev as integer) as integer
private declare function dll_gdxfileversion lib "gdxdclib" alias "cgdxfileversion" (byval pgdx as intptr,byref filestr as byte,byref producestr as byte) as integer
public  declare function gdxfilterexists lib "gdxdclib" (byval pgdx as intptr,byval n as integer) as integer
public  declare function gdxfilterregister lib "gdxdclib" (byval pgdx as intptr,byval v as integer) as integer
public  declare function gdxfilterregisterdone lib "gdxdclib" (byval pgdx as intptr) as integer
public  declare function gdxfilterregisterstart lib "gdxdclib" (byval pgdx as intptr,byval nr as integer) as integer
public  declare function gdxfindsymbol lib "gdxdclib" alias "cgdxfindsymbol" (byval pgdx as intptr,byval aname as string,byref aix as integer) as integer
private declare function dll_gdxgetelemtext lib "gdxdclib" alias "cgdxgetelemtext" (byval pgdx as intptr,byval n as integer,byref s as byte,byref node as integer) as integer
public  declare function gdxgetlasterror lib "gdxdclib" (byval pgdx as intptr) as integer
private declare function dll_gdxgetspecialvalues lib "gdxdclib" alias "gdxgetspecialvalues" (byval pgdx as intptr,byref avals as double) as integer
private declare function dll_gdxgetuel lib "gdxdclib" alias "cgdxgetuel" (byval pgdx as intptr,byval uelnr as integer,byref s as byte) as integer
public  declare function gdxmapvalue lib "gdxdclib" (byval pgdx as intptr,byval d as double,byref sv as integer) as integer
public  declare function gdxopenread lib "gdxdclib" alias "cgdxopenread" (byval pgdx as intptr,byval afn as string,byref errnr as integer) as integer
public  declare function gdxopenwrite lib "gdxdclib" alias "cgdxopenwrite" (byval pgdx as intptr,byval afn as string,byval aproducer as string,byref errnr as integer) as integer
public  declare function gdxopenwriteex lib "gdxdclib" alias "cgdxopenwriteex" (byval pgdx as intptr,byval afn as string,byval aproducer as string,byval compr as integer,byref errnr as integer) as integer
public  declare function gdxresetspecialvalues lib "gdxdclib" (byval pgdx as intptr) as integer
public  declare function gdxsethastext lib "gdxdclib" (byval pgdx as intptr,byval n as integer) as integer
private declare function dll_gdxsetreadspecialvalues lib "gdxdclib" alias "gdxsetreadspecialvalues" (byval pgdx as intptr,byref avals as double) as integer
private declare function dll_gdxsetspecialvalues lib "gdxdclib" alias "gdxsetspecialvalues" (byval pgdx as intptr,byref avals as double) as integer
public  declare function gdxsettextnodenr lib "gdxdclib" (byval pgdx as intptr,byval n as integer,byval node as integer) as integer
public  declare function gdxsettracelevel lib "gdxdclib" alias "cgdxsettracelevel" (byval pgdx as intptr,byval n as integer,byval s as string) as integer
private declare function dll_gdxsymbindxmaxlength lib "gdxdclib" alias "gdxsymbindxmaxlength" (byval pgdx as intptr,byval synr as integer,byref diminfo as integer) as integer
public  declare function gdxsymbmaxlength lib "gdxdclib" (byval pgdx as intptr) as integer
public  declare function gdxsymboladdcomment lib "gdxdclib" alias "cgdxsymboladdcomment" (byval pgdx as intptr,byval synr as integer,byval s as string) as integer
private declare function dll_gdxsymbolgetcomment lib "gdxdclib" alias "cgdxsymbolgetcomment" (byval pgdx as intptr,byval synr as integer,byval n as integer,byref s as byte) as integer
private declare function dll_gdxsymbolgetdomain lib "gdxdclib" alias "gdxsymbolgetdomain" (byval pgdx as intptr,byval synr as integer,byref domainids as integer) as integer
private declare function dll_gdxsymbolinfo lib "gdxdclib" alias "cgdxsymbolinfo" (byval pgdx as intptr,byval synr as integer,byref aname as byte,byref adim as integer,byref atyp as integer) as integer
private declare function dll_gdxsymbolinfox lib "gdxdclib" alias "cgdxsymbolinfox" (byval pgdx as intptr,byval synr as integer,byref acount as integer,byref auserinfo as integer,byref aexpltxt as byte) as integer
private declare function dll_gdxsymbolsetdomain lib "gdxdclib" alias "cgdxsymbolsetdomain" (byval pgdx as intptr,byval domainids() as string) as integer
public  declare function gdxsysteminfo lib "gdxdclib" (byval pgdx as intptr,byref nrsy as integer,byref nruel as integer) as integer
public  declare function gdxuelmaxlength lib "gdxdclib" (byval pgdx as intptr) as integer
public  declare function gdxuelregisterdone lib "gdxdclib" (byval pgdx as intptr) as integer
public  declare function gdxuelregistermap lib "gdxdclib" alias "cgdxuelregistermap" (byval pgdx as intptr,byval uelnr as integer,byval elem as string) as integer
public  declare function gdxuelregistermapstart lib "gdxdclib" (byval pgdx as intptr) as integer
public  declare function gdxuelregisterraw lib "gdxdclib" alias "cgdxuelregisterraw" (byval pgdx as intptr,byval elem as string) as integer
public  declare function gdxuelregisterrawstart lib "gdxdclib" (byval pgdx as intptr) as integer
public  declare function gdxuelregisterstr lib "gdxdclib" alias "cgdxuelregisterstr" (byval pgdx as intptr,byval elem as string,byref uelnr as integer) as integer
public  declare function gdxuelregisterstrstart lib "gdxdclib" (byval pgdx as intptr) as integer
public  declare function gdxumfinduel lib "gdxdclib" alias "cgdxumfinduel" (byval pgdx as intptr,byval s as string,byref en as integer,byref umap as integer) as integer
private declare function dll_gdxumuelget lib "gdxdclib" alias "cgdxumuelget" (byval pgdx as intptr,byval n as integer,byref s as byte,byref umap as integer) as integer
public  declare function gdxumuelinfo lib "gdxdclib" (byval pgdx as intptr,byref nrelem as integer,byref highmap as integer) as integer
public  declare function gdxcurrentdim lib "gdxdclib" (byval pgdx as intptr) as integer


private declare sub xcreate lib "gdxdclib" (byref pgdx as intptr)
private declare sub xfree   lib "gdxdclib" (byref pgdx as intptr)

public function gdxcreate(byref pgdx as intptr, byref msgbuf as string) as boolean
    xcreate(pgdx)
    if pgdx <> 0 then
        gdxcreate = true
    else
        gdxcreate = false
    end if
end function

public function gdxcreatex(byref pgdx as intptr, byref msgbuf as string) as boolean
    xcreate(pgdx)
    if pgdx <> 0 then
        gdxcreatex = true
    else
        gdxcreatex = false
    end if
end function

public function gdxcreated(byref pgdx as intptr, byval dirname as string, byref msgbuf as string) as boolean
    xcreate(pgdx)
    if pgdx <> 0 then
        gdxcreated = true
    else
        gdxcreated = false
    end if
end function

public function gdxcreatel(byref pgdx as intptr, byval libname as string, byref msgbuf as string) as boolean
    xcreate(pgdx)
    if pgdx <> 0 then
        gdxcreatel = true
    else
        gdxcreatel = false
    end if
end function

public function gdxfree(byref pgdx as intptr) as boolean
   xfree(pgdx)
   gdxfree = true
end function
private sub convertc2bas(byval b() as byte, byref s as string)
    dim i as integer
    s = ""
    i = 0
    while b(i) <> 0
        s = s & chr(b(i))
        i = i + 1
    end while
end sub

private sub convertarrayc2bas(byval b(,) as byte, byref s as string, byval k as integer)
    dim i as integer
    s = ""
    i = 0
    while b(k, i) <> 0
        s = s & chr(b(k, i))
        i = i + 1
    end while
end sub

public sub gdxgetloadpath (byref s as string)
   dim cpy_s(str_len) as byte
   dll_gdxgetloadpath(cpy_s(0))
   call convertc2bas(cpy_s,s)
end sub

public function gdxacronymgetinfo(byval pgdx as intptr,byval n as integer,byref aname as string,byref atext as string,byref indx as integer) as integer
   dim cpy_aname(str_len) as byte
   dim cpy_atext(str_len) as byte
   gdxacronymgetinfo = dll_gdxacronymgetinfo(pgdx,n,cpy_aname(0),cpy_atext(0),indx)
   call convertc2bas(cpy_aname,aname)
   call convertc2bas(cpy_atext,atext)
end function

public function gdxacronymname(byval pgdx as intptr,byval v as double,byref aname as string) as integer
   dim cpy_aname(str_len) as byte
   gdxacronymname = dll_gdxacronymname(pgdx,v,cpy_aname(0))
   call convertc2bas(cpy_aname,aname)
end function

public function gdxdataerrorrecord(byval pgdx as intptr,byval rn as integer,byref aelements() as integer,byref avals() as double) as integer
   gdxdataerrorrecord = dll_gdxdataerrorrecord(pgdx,rn,aelements(0),avals(0))
end function

public function gdxdatareadfilteredstart(byval pgdx as intptr,byval synr as integer,byref adomainnrs() as integer,byref nrrecs as integer) as integer
   gdxdatareadfilteredstart = dll_gdxdatareadfilteredstart(pgdx,synr,adomainnrs(0),nrrecs)
end function

public function gdxdatareadmap(byval pgdx as intptr,byval rn as integer,byref aelements() as integer,byref avals() as double,byref afdim as integer) as integer
   gdxdatareadmap = dll_gdxdatareadmap(pgdx,rn,aelements(0),avals(0),afdim)
end function

public function gdxdatareadraw(byval pgdx as intptr,byref aelements() as integer,byref avals() as double,byref afdim as integer) as integer
   gdxdatareadraw = dll_gdxdatareadraw(pgdx,aelements(0),avals(0),afdim)
end function

public function gdxdatareadslice(byval pgdx as intptr,byval afiltelements() as string,byref adim as integer,byval dp as tdatastoreproc) as integer
   gdxdatareadslice = dll_gdxdatareadslice(pgdx,afiltelements,adim,dp)
end function

public function gdxdatareadslicestart(byval pgdx as intptr,byval asynr as integer,byref anrelems() as integer) as integer
   gdxdatareadslicestart = dll_gdxdatareadslicestart(pgdx,asynr,anrelems(0))
end function

public function gdxdatareadstr(byval pgdx as intptr,byref astrelements() as string,byref avals() as double,byref afdim as integer) as integer
   dim cpy_astrelements(maxdim,str_len) as byte
   dim i_astrelements as integer
   dim sidim_astrelements as integer
   gdxdatareadstr = dll_gdxdatareadstr(pgdx,cpy_astrelements(0,0),avals(0),afdim)
   sidim_astrelements = gdxcurrentdim(pgdx)
   for i_astrelements = 0 to sidim_astrelements
      call convertarrayc2bas(cpy_astrelements,astrelements(i_astrelements), i_astrelements)
   next i_astrelements
end function

public function gdxdatasliceuels(byval pgdx as intptr,byref aindx() as integer,byref auels() as string) as integer
   dim cpy_auels(maxdim,str_len) as byte
   dim i_auels as integer
   dim sidim_auels as integer
   gdxdatasliceuels = dll_gdxdatasliceuels(pgdx,aindx(0),cpy_auels(0,0))
   sidim_auels = gdxcurrentdim(pgdx)
   for i_auels = 0 to sidim_auels
      call convertarrayc2bas(cpy_auels,auels(i_auels), i_auels)
   next i_auels
end function

public function gdxdatawritemap(byval pgdx as intptr,byref aelements() as integer,byref avals() as double) as integer
   gdxdatawritemap = dll_gdxdatawritemap(pgdx,aelements(0),avals(0))
end function

public function gdxdatawriteraw(byval pgdx as intptr,byref aelements() as integer,byref avals() as double) as integer
   gdxdatawriteraw = dll_gdxdatawriteraw(pgdx,aelements(0),avals(0))
end function

public function gdxdatawritestr(byval pgdx as intptr,byval astrelements() as string,byref avals() as double) as integer
   gdxdatawritestr = dll_gdxdatawritestr(pgdx,astrelements,avals(0))
end function

public function gdxgetdllversion(byval pgdx as intptr,byref v as string) as integer
   dim cpy_v(str_len) as byte
   gdxgetdllversion = dll_gdxgetdllversion(pgdx,cpy_v(0))
   call convertc2bas(cpy_v,v)
end function

public function gdxerrorstr(byval pgdx as intptr,byval n as integer,byref s as string) as integer
   dim cpy_s(str_len) as byte
   gdxerrorstr = dll_gdxerrorstr(pgdx,n,cpy_s(0))
   call convertc2bas(cpy_s,s)
end function

public function gdxfileversion(byval pgdx as intptr,byref filestr as string,byref producestr as string) as integer
   dim cpy_filestr(str_len) as byte
   dim cpy_producestr(str_len) as byte
   gdxfileversion = dll_gdxfileversion(pgdx,cpy_filestr(0),cpy_producestr(0))
   call convertc2bas(cpy_filestr,filestr)
   call convertc2bas(cpy_producestr,producestr)
end function

public function gdxgetelemtext(byval pgdx as intptr,byval n as integer,byref s as string,byref node as integer) as integer
   dim cpy_s(str_len) as byte
   gdxgetelemtext = dll_gdxgetelemtext(pgdx,n,cpy_s(0),node)
   call convertc2bas(cpy_s,s)
end function

public function gdxgetspecialvalues(byval pgdx as intptr,byref avals() as double) as integer
   gdxgetspecialvalues = dll_gdxgetspecialvalues(pgdx,avals(0))
end function

public function gdxgetuel(byval pgdx as intptr,byval uelnr as integer,byref s as string) as integer
   dim cpy_s(str_len) as byte
   gdxgetuel = dll_gdxgetuel(pgdx,uelnr,cpy_s(0))
   call convertc2bas(cpy_s,s)
end function

public function gdxsetreadspecialvalues(byval pgdx as intptr,byref avals() as double) as integer
   gdxsetreadspecialvalues = dll_gdxsetreadspecialvalues(pgdx,avals(0))
end function

public function gdxsetspecialvalues(byval pgdx as intptr,byref avals() as double) as integer
   gdxsetspecialvalues = dll_gdxsetspecialvalues(pgdx,avals(0))
end function

public function gdxsymbindxmaxlength(byval pgdx as intptr,byval synr as integer,byref diminfo() as integer) as integer
   gdxsymbindxmaxlength = dll_gdxsymbindxmaxlength(pgdx,synr,diminfo(0))
end function

public function gdxsymbolgetcomment(byval pgdx as intptr,byval synr as integer,byval n as integer,byref s as string) as integer
   dim cpy_s(str_len) as byte
   gdxsymbolgetcomment = dll_gdxsymbolgetcomment(pgdx,synr,n,cpy_s(0))
   call convertc2bas(cpy_s,s)
end function

public function gdxsymbolgetdomain(byval pgdx as intptr,byval synr as integer,byref domainids() as integer) as integer
   gdxsymbolgetdomain = dll_gdxsymbolgetdomain(pgdx,synr,domainids(0))
end function

public function gdxsymbolinfo(byval pgdx as intptr,byval synr as integer,byref aname as string,byref adim as integer,byref atyp as integer) as integer
   dim cpy_aname(str_len) as byte
   gdxsymbolinfo = dll_gdxsymbolinfo(pgdx,synr,cpy_aname(0),adim,atyp)
   call convertc2bas(cpy_aname,aname)
end function

public function gdxsymbolinfox(byval pgdx as intptr,byval synr as integer,byref acount as integer,byref auserinfo as integer,byref aexpltxt as string) as integer
   dim cpy_aexpltxt(str_len) as byte
   gdxsymbolinfox = dll_gdxsymbolinfox(pgdx,synr,acount,auserinfo,cpy_aexpltxt(0))
   call convertc2bas(cpy_aexpltxt,aexpltxt)
end function

public function gdxsymbolsetdomain(byval pgdx as intptr,byval domainids() as string) as integer
   gdxsymbolsetdomain = dll_gdxsymbolsetdomain(pgdx,domainids)
end function

public function gdxumuelget(byval pgdx as intptr,byval n as integer,byref s as string,byref umap as integer) as integer
   dim cpy_s(str_len) as byte
   gdxumuelget = dll_gdxumuelget(pgdx,n,cpy_s(0),umap)
   call convertc2bas(cpy_s,s)
end function

end module
