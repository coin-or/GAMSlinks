unit optdcdef; { Delphi procedure wrapper generated by apiwrapper }

{$P- no open parameters ==> no maxlen byte}
{$V+ force var strings}
{$H- short only }

interface

uses
   {$I p3compat},
   gmsgen;

const optDataNone    = 0;  { optDataType }
      optDataInteger = 1;
      optDataDouble  = 2;
      optDataString  = 3;
      optDataStrList = 4;

const optTypeInteger   = 0;  { optOptionType }
      optTypeDouble    = 1;
      optTypeString    = 2;
      optTypeBoolean   = 3;
      optTypeEnumStr   = 4;
      optTypeEnumInt   = 5;
      optTypeMultiList = 6;
      optTypeStrList   = 7;
      optTypeMacro     = 8;
      optTypeImmediate = 9;

const optsubRequired = 0;  { optOptionSubType }
      optsubNoValue  = 1;
      optsubOptional = 2;
      optsub2Values  = 3;

const optMsgInputEcho    = 0;  { optMsgType }
      optMsgHelp         = 1;
      optMsgDefineError  = 2;
      optMsgValueError   = 3;
      optMsgValueWarning = 4;
      optMsgDeprecated   = 5;
      optMsgFileEnter    = 6;
      optMsgFileLeave    = 7;
      optMsgTooManyMsgs  = 8;
      optMsgUserError    = 9;

type
   TErrorCallback = function(ErrCount:Integer; const Msg:ShortString):Integer; {$I decorate};

//tries to load DLL from OS default location
//name for the DLL is automatic
function  optGetReady(var Msg: ShortString): boolean;
//tries to load DLL from main program directory; if that fails
//loads DLL from OS default location
//name for the DLL is automatic
function  optGetReadyX(var Msg: ShortString): boolean;
//loads DLL from specified directory
//name for the DLL is automatic
function optGetReadyD(const Dir: ShortString; var Msg: ShortString): boolean;
//loads DLL from the full path specified
//no changes are made to the name (platform and file extension)
function optGetReadyL(const LibName: ShortString; var Msg: ShortString): boolean;

//tries to load DLL from OS default location
//name for the DLL is automatic
function optCreate(var popt: pointer; var Msg: ShortString): boolean;
//tries to load DLL from main program directory; if that fails
//loads DLL from OS default location
//name for the DLL is automatic
function optCreateX(var popt: pointer; var Msg: ShortString): boolean;
//loads DLL from specified directory
//name for the DLL is automatic
function optCreateD(var popt: pointer; const Dir: ShortString; var Msg: shortString): boolean;
//loads DLL from the full path specified
function optCreateL(var popt: pointer; const LibName: ShortString; var Msg: shortString): boolean;

//creates handle from a given pointer
procedure optCreateHandle(popt: pointer; var myopt: pointer);
//returns a handle
function  optGetHandle(popt: pointer): pointer;

procedure optFree  (var popt: pointer);
procedure optLibraryUnload;
function  optLibraryLoaded: boolean;

function  optGetScreenIndicator: boolean;
procedure optSetScreenIndicator(const ScrInd: boolean);
function  optGetExceptionIndicator: boolean;
procedure optSetExceptionIndicator(const ExcInd: boolean);
function  optGetExitIndicator: boolean;
procedure optSetExitIndicator(const ExtInd: boolean);
function  optGetErrorCount: Integer;
procedure optSetErrorCount(const ecnt: Integer);
function  optGetErrorCallback: TErrorCallback;
procedure optSetErrorCallback(ecb: TErrorCallback);
procedure optErrorHandling(const Msg: ShortString);

// functions and procedures
var optSetLoadPath       : procedure(const s: shortString); {$I decorate};
var optGetLoadPath       : procedure(var s: shortString); {$I decorate};
var optReadDefinition    : function (popt: pointer; const fn: ShortString): Integer; {$I decorate};
var optReadParameterFile : function (popt: pointer; const fn: ShortString): Integer; {$I decorate};
var optReadFromStr       : procedure(popt: pointer; const s: ShortString); {$I decorate};
var optWriteParameterFile: function (popt: pointer; const fn: ShortString): Integer; {$I decorate};
var optClearMessages     : procedure(popt: pointer); {$I decorate};
var optAddMessage        : procedure(popt: pointer; const info: ShortString); {$I decorate};
var optGetMessage        : procedure(popt: pointer; N: Integer; var info: ShortString; var iType: Integer); {$I decorate};
var optResetAll          : procedure(popt: pointer); {$I decorate};
var optResetAllRecent    : procedure(popt: pointer); {$I decorate};
var optResetRecentChanges: procedure(popt: pointer); {$I decorate};
var optShowHelp          : procedure(popt: pointer; const HlpID: ShortString); {$I decorate};
var optResetNr           : function (popt: pointer; ANr: Integer): Integer; {$I decorate};
var optFindStr           : function (popt: pointer; const AName: ShortString; var ANr: Integer; var ARefNr: Integer): Integer; {$I decorate};
var optGetInfoNr         : function (popt: pointer; ANr: Integer; var ADefined: Integer; var ADefinedR: Integer; var ARefNr: Integer; var ADataType: Integer; var AOptType: Integer; var ASubType: Integer): Integer; {$I decorate};
var optGetValuesNr       : function (popt: pointer; ANr: Integer; var ASName: ShortString; var AIVal: Integer; var ADVal: Double; var ASVal: ShortString): Integer; {$I decorate};
var optSetValuesNr       : function (popt: pointer; ANr: Integer; AIVal: Integer; ADVal: Double; const ASVal: ShortString): Integer; {$I decorate};
var optSetValues2Nr      : function (popt: pointer; ANr: Integer; AIVal: Integer; ADVal: Double; const ASVal: ShortString): Integer; {$I decorate};
var optVersion           : procedure(popt: pointer; var sversion: ShortString); {$I decorate};
var optDefinitionFile    : procedure(popt: pointer; var sfilename: ShortString); {$I decorate};
var optGetFromAnyStrList : function (popt: pointer; idash: Integer; var skey: ShortString; var sval: ShortString): Integer; {$I decorate};
var optGetFromListStr    : function (popt: pointer; const skey: ShortString; var sval: ShortString): Integer; {$I decorate};
var optListCountStr      : function (popt: pointer; const skey: ShortString): Integer; {$I decorate};
var optReadFromListStr   : function (popt: pointer; const skey: ShortString; iPos: Integer; var sval: ShortString): Integer; {$I decorate};
var optSynonymCount      : function (popt: pointer): Integer; {$I decorate};
var optGetSynonym        : function (popt: pointer; N: Integer; var SSyn: ShortString; var SName: ShortString): Integer; {$I decorate};
var optEchoSet           : procedure(popt: pointer; V: Integer); {$I decorate};
var optEOLOnlySet        : function (popt: pointer; ival: Integer): Integer; {$I decorate};
var optNoBoundsSet       : procedure(popt: pointer; ival: Integer); {$I decorate};
var optErrorCount        : procedure(popt: pointer; var iErrors: Integer; var iWarnings: Integer); {$I decorate};
var optGetBoundsInt      : function (popt: pointer; ANr: Integer; var ilval: Integer; var ihval: Integer; var idval: Integer): Integer; {$I decorate};
var optGetBoundsDbl      : function (popt: pointer; ANr: Integer; var dlval: Double; var dhval: Double; var ddval: Double): Integer; {$I decorate};
var optGetDefaultStr     : function (popt: pointer; ANr: Integer; var sval: ShortString): Integer; {$I decorate};
var optGetIntNr          : function (popt: pointer; ANr: Integer; var AIVal: Integer): Integer; {$I decorate};
var optGetInt2Nr         : function (popt: pointer; ANr: Integer; var AIVal: Integer): Integer; {$I decorate};
var optSetIntNr          : function (popt: pointer; ANr: Integer; AIVal: Integer): Integer; {$I decorate};
var optSetInt2Nr         : function (popt: pointer; ANr: Integer; AIVal: Integer): Integer; {$I decorate};
var optGetStrNr          : function (popt: pointer; ANr: Integer; var ASVal: ShortString): Integer; {$I decorate};
var optGetOptHelpNr      : function (popt: pointer; ANr: Integer; var AName: ShortString; var AHc: Integer; var AGroup: Integer): Integer; {$I decorate};
var optGetEnumHelp       : function (popt: pointer; ANr: Integer; AOrd: Integer; var AHc: Integer; var AHelpStr: ShortString): Integer; {$I decorate};
var optGetEnumStrNr      : function (popt: pointer; ANr: Integer; var ASVal: ShortString; var AOrd: Integer): Integer; {$I decorate};
var optGetEnumCount      : function (popt: pointer; ANr: Integer; var ACount: Integer): Integer; {$I decorate};
var optGetEnumValue      : function (popt: pointer; ANr: Integer; AOrd: Integer; var AValInt: Integer; var AValStr: ShortString): Integer; {$I decorate};
var optGetStr2Nr         : function (popt: pointer; ANr: Integer; var ASVal: ShortString): Integer; {$I decorate};
var optSetStrNr          : function (popt: pointer; ANr: Integer; const ASVal: ShortString): Integer; {$I decorate};
var optSetStr2Nr         : function (popt: pointer; ANr: Integer; const ASVal: ShortString): Integer; {$I decorate};
var optGetDblNr          : function (popt: pointer; ANr: Integer; var ADVal: Double): Integer; {$I decorate};
var optGetDbl2Nr         : function (popt: pointer; ANr: Integer; var ADVal: Double): Integer; {$I decorate};
var optSetDblNr          : function (popt: pointer; ANr: Integer; ADVal: Double): Integer; {$I decorate};
var optSetDbl2Nr         : function (popt: pointer; ANr: Integer; ADVal: Double): Integer; {$I decorate};
var optGetValStr         : function (popt: pointer; const AName: ShortString; var ASVal: ShortString): Integer; {$I decorate};
var optGetVal2Str        : function (popt: pointer; const AName: ShortString; var ASVal: ShortString): Integer; {$I decorate};
var optGetNameNr         : function (popt: pointer; ANr: Integer; var ASName: ShortString): Integer; {$I decorate};
var optGetDefinedNr      : function (popt: pointer; ANr: Integer; var AIVal: Integer): Integer; {$I decorate};
var optGetHelpNr         : function (popt: pointer; ANr: Integer; var ASOpt: ShortString; var ASHelp: ShortString): Integer; {$I decorate};
var optGetGroupNr        : function (popt: pointer; ANr: Integer; var AName: ShortString; var AGroup: Integer; var AHc: Integer; var AHelp: ShortString): Integer; {$I decorate};
var optGetGroupGrpNr     : function (popt: pointer; AGroup: Integer): Integer; {$I decorate};
var optGetOptGroupNr     : function (popt: pointer; ANr: Integer): Integer; {$I decorate};
var optGetDotOptNr       : function (popt: pointer; ANr: Integer; var AName: ShortString; var AObjNr: Integer; var ADim: Integer; var AValue: Double): Integer; {$I decorate};
var optGetDotOptUel      : function (popt: pointer; ANr: Integer; ADim: Integer; var AUEL: ShortString): Integer; {$I decorate};
var optGetIndicatorNr    : function (popt: pointer; ANr: Integer; var EquName: ShortString; var VarName: ShortString; var EquDim: Integer; var VarDim: Integer; var AValue: Integer): Integer; {$I decorate};
var optGetEquIndicatorNr : function (popt: pointer; ANr: Integer; ADim: Integer; var AIndex: ShortString): Integer; {$I decorate};
var optGetVarIndicatorNr : function (popt: pointer; ANr: Integer; ADim: Integer; var AIndex: ShortString): Integer; {$I decorate};
var optIndicatorCount    : function (popt: pointer; var ANrErrors: Integer): Integer; {$I decorate};
var optDotOptCount       : function (popt: pointer; var ANrErrors: Integer): Integer; {$I decorate};
var optSetRefNr          : function (popt: pointer; ANr: Integer; AValue: Integer): Integer; {$I decorate};
var optSetRefNrStr       : function (popt: pointer; const AOpt: ShortString; AValue: Integer): Integer; {$I decorate};
var optGetConstName      : function (popt: pointer; cgroup: Integer; cindex: Integer; var cname: ShortString): Integer; {$I decorate};
var optGetTypeName       : function (popt: pointer; TNr: Integer; var sTName: ShortString): Integer; {$I decorate};
var optLookUp            : function (popt: pointer; const AOpt: ShortString): Integer; {$I decorate};
var optReadFromPChar     : procedure(popt: pointer; p: PChar); {$I decorate};

// properties as functions and procedures
var optCount           : function  (popt: pointer): Integer; {$I decorate};
var optMessageCount    : function  (popt: pointer): Integer; {$I decorate};
var optGroupCount      : function  (popt: pointer): Integer; {$I decorate};
var optRecentEnabled   : function  (popt: pointer): Integer; {$I decorate};
var optRecentEnabledSet: procedure (popt: pointer; x: Integer); {$I decorate};
implementation

uses
   gmslibname;

const
   APIVersion     = 2;
   DLLWrapsObject = true;
   Debug          = false;

var
   LibHandle         : TLibHandle;
   LibFileName       : ShortString;
   ScreenIndicator   : Boolean = true;
   ExceptionIndicator: Boolean = false;
   ExitIndicator     : Boolean = false;
   ObjectCount       : Integer = 0;
   APIErrorCount     : Integer = 0;
   ErrorCallback     : TErrorCallback;

var XCreate: procedure (var popt: pointer); {$I decorate} ;
var XFree  : procedure (var popt: pointer); {$I decorate} ;

var XAPIVersion: function (const api: integer; var msg: ShortString; var comp: Integer): boolean; {$I decorate} ;
var XCheck: function (const funcn: shortString; const NrArg: integer; const sign: PIntegerArray; var msg: ShortString): boolean; {$I decorate};

Function  d_optReadDefinition(popt: pointer; const fn: ShortString): Integer; {$I decorate};
begin
optErrorHandling('optReadDefinition could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optReadParameterFile(popt: pointer; const fn: ShortString): Integer; {$I decorate};
begin
optErrorHandling('optReadParameterFile could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Procedure d_optReadFromStr(popt: pointer; const s: ShortString); {$I decorate};
begin
optErrorHandling('optReadFromStr could not be loaded from ' + LibFileName + ' or has wrong signature!');
end;

Function  d_optWriteParameterFile(popt: pointer; const fn: ShortString): Integer; {$I decorate};
begin
optErrorHandling('optWriteParameterFile could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Procedure d_optClearMessages(popt: pointer); {$I decorate};
begin
optErrorHandling('optClearMessages could not be loaded from ' + LibFileName + ' or has wrong signature!');
end;

Procedure d_optAddMessage(popt: pointer; const info: ShortString); {$I decorate};
begin
optErrorHandling('optAddMessage could not be loaded from ' + LibFileName + ' or has wrong signature!');
end;

Procedure d_optGetMessage(popt: pointer; N: Integer; var info: ShortString; var iType: Integer); {$I decorate};
begin
optErrorHandling('optGetMessage could not be loaded from ' + LibFileName + ' or has wrong signature!');
end;

Procedure d_optResetAll(popt: pointer); {$I decorate};
begin
optErrorHandling('optResetAll could not be loaded from ' + LibFileName + ' or has wrong signature!');
end;

Procedure d_optResetAllRecent(popt: pointer); {$I decorate};
begin
optErrorHandling('optResetAllRecent could not be loaded from ' + LibFileName + ' or has wrong signature!');
end;

Procedure d_optResetRecentChanges(popt: pointer); {$I decorate};
begin
optErrorHandling('optResetRecentChanges could not be loaded from ' + LibFileName + ' or has wrong signature!');
end;

Procedure d_optShowHelp(popt: pointer; const HlpID: ShortString); {$I decorate};
begin
optErrorHandling('optShowHelp could not be loaded from ' + LibFileName + ' or has wrong signature!');
end;

Function  d_optResetNr(popt: pointer; ANr: Integer): Integer; {$I decorate};
begin
optErrorHandling('optResetNr could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optFindStr(popt: pointer; const AName: ShortString; var ANr: Integer; var ARefNr: Integer): Integer; {$I decorate};
begin
optErrorHandling('optFindStr could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optGetInfoNr(popt: pointer; ANr: Integer; var ADefined: Integer; var ADefinedR: Integer; var ARefNr: Integer; var ADataType: Integer; var AOptType: Integer; var ASubType: Integer): Integer; {$I decorate};
begin
optErrorHandling('optGetInfoNr could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optGetValuesNr(popt: pointer; ANr: Integer; var ASName: ShortString; var AIVal: Integer; var ADVal: Double; var ASVal: ShortString): Integer; {$I decorate};
begin
optErrorHandling('optGetValuesNr could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optSetValuesNr(popt: pointer; ANr: Integer; AIVal: Integer; ADVal: Double; const ASVal: ShortString): Integer; {$I decorate};
begin
optErrorHandling('optSetValuesNr could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optSetValues2Nr(popt: pointer; ANr: Integer; AIVal: Integer; ADVal: Double; const ASVal: ShortString): Integer; {$I decorate};
begin
optErrorHandling('optSetValues2Nr could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Procedure d_optVersion(popt: pointer; var sversion: ShortString); {$I decorate};
begin
optErrorHandling('optVersion could not be loaded from ' + LibFileName + ' or has wrong signature!');
end;

Procedure d_optDefinitionFile(popt: pointer; var sfilename: ShortString); {$I decorate};
begin
optErrorHandling('optDefinitionFile could not be loaded from ' + LibFileName + ' or has wrong signature!');
end;

Function  d_optGetFromAnyStrList(popt: pointer; idash: Integer; var skey: ShortString; var sval: ShortString): Integer; {$I decorate};
begin
optErrorHandling('optGetFromAnyStrList could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optGetFromListStr(popt: pointer; const skey: ShortString; var sval: ShortString): Integer; {$I decorate};
begin
optErrorHandling('optGetFromListStr could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optListCountStr(popt: pointer; const skey: ShortString): Integer; {$I decorate};
begin
optErrorHandling('optListCountStr could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optReadFromListStr(popt: pointer; const skey: ShortString; iPos: Integer; var sval: ShortString): Integer; {$I decorate};
begin
optErrorHandling('optReadFromListStr could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optSynonymCount(popt: pointer): Integer; {$I decorate};
begin
optErrorHandling('optSynonymCount could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optGetSynonym(popt: pointer; N: Integer; var SSyn: ShortString; var SName: ShortString): Integer; {$I decorate};
begin
optErrorHandling('optGetSynonym could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Procedure d_optEchoSet(popt: pointer; V: Integer); {$I decorate};
begin
optErrorHandling('optEchoSet could not be loaded from ' + LibFileName + ' or has wrong signature!');
end;

Function  d_optEOLOnlySet(popt: pointer; ival: Integer): Integer; {$I decorate};
begin
optErrorHandling('optEOLOnlySet could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Procedure d_optNoBoundsSet(popt: pointer; ival: Integer); {$I decorate};
begin
optErrorHandling('optNoBoundsSet could not be loaded from ' + LibFileName + ' or has wrong signature!');
end;

Procedure d_optErrorCount(popt: pointer; var iErrors: Integer; var iWarnings: Integer); {$I decorate};
begin
optErrorHandling('optErrorCount could not be loaded from ' + LibFileName + ' or has wrong signature!');
end;

Function  d_optGetBoundsInt(popt: pointer; ANr: Integer; var ilval: Integer; var ihval: Integer; var idval: Integer): Integer; {$I decorate};
begin
optErrorHandling('optGetBoundsInt could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optGetBoundsDbl(popt: pointer; ANr: Integer; var dlval: Double; var dhval: Double; var ddval: Double): Integer; {$I decorate};
begin
optErrorHandling('optGetBoundsDbl could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optGetDefaultStr(popt: pointer; ANr: Integer; var sval: ShortString): Integer; {$I decorate};
begin
optErrorHandling('optGetDefaultStr could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optGetIntNr(popt: pointer; ANr: Integer; var AIVal: Integer): Integer; {$I decorate};
begin
optErrorHandling('optGetIntNr could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optGetInt2Nr(popt: pointer; ANr: Integer; var AIVal: Integer): Integer; {$I decorate};
begin
optErrorHandling('optGetInt2Nr could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optSetIntNr(popt: pointer; ANr: Integer; AIVal: Integer): Integer; {$I decorate};
begin
optErrorHandling('optSetIntNr could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optSetInt2Nr(popt: pointer; ANr: Integer; AIVal: Integer): Integer; {$I decorate};
begin
optErrorHandling('optSetInt2Nr could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optGetStrNr(popt: pointer; ANr: Integer; var ASVal: ShortString): Integer; {$I decorate};
begin
optErrorHandling('optGetStrNr could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optGetOptHelpNr(popt: pointer; ANr: Integer; var AName: ShortString; var AHc: Integer; var AGroup: Integer): Integer; {$I decorate};
begin
optErrorHandling('optGetOptHelpNr could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optGetEnumHelp(popt: pointer; ANr: Integer; AOrd: Integer; var AHc: Integer; var AHelpStr: ShortString): Integer; {$I decorate};
begin
optErrorHandling('optGetEnumHelp could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optGetEnumStrNr(popt: pointer; ANr: Integer; var ASVal: ShortString; var AOrd: Integer): Integer; {$I decorate};
begin
optErrorHandling('optGetEnumStrNr could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optGetEnumCount(popt: pointer; ANr: Integer; var ACount: Integer): Integer; {$I decorate};
begin
optErrorHandling('optGetEnumCount could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optGetEnumValue(popt: pointer; ANr: Integer; AOrd: Integer; var AValInt: Integer; var AValStr: ShortString): Integer; {$I decorate};
begin
optErrorHandling('optGetEnumValue could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optGetStr2Nr(popt: pointer; ANr: Integer; var ASVal: ShortString): Integer; {$I decorate};
begin
optErrorHandling('optGetStr2Nr could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optSetStrNr(popt: pointer; ANr: Integer; const ASVal: ShortString): Integer; {$I decorate};
begin
optErrorHandling('optSetStrNr could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optSetStr2Nr(popt: pointer; ANr: Integer; const ASVal: ShortString): Integer; {$I decorate};
begin
optErrorHandling('optSetStr2Nr could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optGetDblNr(popt: pointer; ANr: Integer; var ADVal: Double): Integer; {$I decorate};
begin
optErrorHandling('optGetDblNr could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optGetDbl2Nr(popt: pointer; ANr: Integer; var ADVal: Double): Integer; {$I decorate};
begin
optErrorHandling('optGetDbl2Nr could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optSetDblNr(popt: pointer; ANr: Integer; ADVal: Double): Integer; {$I decorate};
begin
optErrorHandling('optSetDblNr could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optSetDbl2Nr(popt: pointer; ANr: Integer; ADVal: Double): Integer; {$I decorate};
begin
optErrorHandling('optSetDbl2Nr could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optGetValStr(popt: pointer; const AName: ShortString; var ASVal: ShortString): Integer; {$I decorate};
begin
optErrorHandling('optGetValStr could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optGetVal2Str(popt: pointer; const AName: ShortString; var ASVal: ShortString): Integer; {$I decorate};
begin
optErrorHandling('optGetVal2Str could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optGetNameNr(popt: pointer; ANr: Integer; var ASName: ShortString): Integer; {$I decorate};
begin
optErrorHandling('optGetNameNr could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optGetDefinedNr(popt: pointer; ANr: Integer; var AIVal: Integer): Integer; {$I decorate};
begin
optErrorHandling('optGetDefinedNr could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optGetHelpNr(popt: pointer; ANr: Integer; var ASOpt: ShortString; var ASHelp: ShortString): Integer; {$I decorate};
begin
optErrorHandling('optGetHelpNr could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optGetGroupNr(popt: pointer; ANr: Integer; var AName: ShortString; var AGroup: Integer; var AHc: Integer; var AHelp: ShortString): Integer; {$I decorate};
begin
optErrorHandling('optGetGroupNr could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optGetGroupGrpNr(popt: pointer; AGroup: Integer): Integer; {$I decorate};
begin
optErrorHandling('optGetGroupGrpNr could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optGetOptGroupNr(popt: pointer; ANr: Integer): Integer; {$I decorate};
begin
optErrorHandling('optGetOptGroupNr could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optGetDotOptNr(popt: pointer; ANr: Integer; var AName: ShortString; var AObjNr: Integer; var ADim: Integer; var AValue: Double): Integer; {$I decorate};
begin
optErrorHandling('optGetDotOptNr could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optGetDotOptUel(popt: pointer; ANr: Integer; ADim: Integer; var AUEL: ShortString): Integer; {$I decorate};
begin
optErrorHandling('optGetDotOptUel could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optGetIndicatorNr(popt: pointer; ANr: Integer; var EquName: ShortString; var VarName: ShortString; var EquDim: Integer; var VarDim: Integer; var AValue: Integer): Integer; {$I decorate};
begin
optErrorHandling('optGetIndicatorNr could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optGetEquIndicatorNr(popt: pointer; ANr: Integer; ADim: Integer; var AIndex: ShortString): Integer; {$I decorate};
begin
optErrorHandling('optGetEquIndicatorNr could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optGetVarIndicatorNr(popt: pointer; ANr: Integer; ADim: Integer; var AIndex: ShortString): Integer; {$I decorate};
begin
optErrorHandling('optGetVarIndicatorNr could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optIndicatorCount(popt: pointer; var ANrErrors: Integer): Integer; {$I decorate};
begin
optErrorHandling('optIndicatorCount could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optDotOptCount(popt: pointer; var ANrErrors: Integer): Integer; {$I decorate};
begin
optErrorHandling('optDotOptCount could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optSetRefNr(popt: pointer; ANr: Integer; AValue: Integer): Integer; {$I decorate};
begin
optErrorHandling('optSetRefNr could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optSetRefNrStr(popt: pointer; const AOpt: ShortString; AValue: Integer): Integer; {$I decorate};
begin
optErrorHandling('optSetRefNrStr could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optGetConstName(popt: pointer; cgroup: Integer; cindex: Integer; var cname: ShortString): Integer; {$I decorate};
begin
optErrorHandling('optGetConstName could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optGetTypeName(popt: pointer; TNr: Integer; var sTName: ShortString): Integer; {$I decorate};
begin
optErrorHandling('optGetTypeName could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optLookUp(popt: pointer; const AOpt: ShortString): Integer; {$I decorate};
begin
optErrorHandling('optLookUp could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Procedure d_optReadFromPChar(popt: pointer; p: PChar); {$I decorate};
begin
optErrorHandling('optReadFromPChar could not be loaded from ' + LibFileName + ' or has wrong signature!');
end;

Function  d_optCount(popt: pointer): Integer; {$I decorate};
begin
optErrorHandling('optCount could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optMessageCount(popt: pointer): Integer; {$I decorate};
begin
optErrorHandling('optMessageCount could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optGroupCount(popt: pointer): Integer; {$I decorate};
begin
optErrorHandling('optGroupCount could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Function  d_optRecentEnabled(popt: pointer): Integer; {$I decorate};
begin
optErrorHandling('optRecentEnabled could not be loaded from ' + LibFileName + ' or has wrong signature!');
Result := 0;
end;

Procedure d_optRecentEnabledSet(popt: pointer; x: Integer); {$I decorate};
begin
optErrorHandling('optRecentEnabledSet could not be loaded from ' + LibFileName + ' or has wrong signature!');
end;

function  optGetScreenIndicator: boolean;
begin
Result := ScreenIndicator;
end;

procedure optSetScreenIndicator(const ScrInd: boolean);
begin
ScreenIndicator := ScrInd;
end;

function  optGetExceptionIndicator: boolean;
begin
Result := ExceptionIndicator;
end;

procedure optSetExceptionIndicator(const ExcInd: boolean);
begin
ExceptionIndicator := ExcInd;
end;

function  optGetExitIndicator: boolean;
begin
Result := ExitIndicator;
end;

procedure optSetExitIndicator(const ExtInd: boolean);
begin
ExitIndicator := ExtInd;
end;

function  optGetErrorCount: Integer;
begin
Result := APIErrorCount;
end;

procedure optSetErrorCount(const ecnt: Integer);
begin
APIErrorCount := ecnt;
end;

function  optGetErrorCallback: TErrorCallback;
begin
Result := @ErrorCallback;
end;

procedure optSetErrorCallback(ecb: TErrorCallback);
begin
ErrorCallback := ecb;
end;

Procedure optErrorHandling(const Msg: ShortString);
begin
inc(APIErrorCount);
if ScreenIndicator then writeln(Msg);
assert(not ExceptionIndicator, Msg);
if (@ErrorCallback <> nil) and (ErrorCallback(APIErrorCount, Msg) <> 0) then halt;
if ExitIndicator then halt;
end;

function XLibraryLoad(var LoadMsg: ShortString): boolean;
var
   comp: Integer;
   Msg : ShortString;
   sign: Array[0..7] of Integer;

   function LoadEntry(const n: ShortString; const NoArgs: Integer; const d_x: Pointer): pointer;
   begin
   Result := d_x;
   if (comp < 0) or XCheck(n, NoArgs, @sign, Msg)
   then
      begin
      Result := P3GetProcAddress(LibHandle, LowerCase(n));
      if Result = d_x
      then
         Result := P3GetProcAddress(LibHandle, n);
      if Result = d_x
      then
         Result := P3GetProcAddress(LibHandle, UpperCase(n));
      if Result = d_x
      then
         Msg := 'Entry not found: ' + n + ' in ' + LibFileName;
      end;
   if Debug and (Msg <> '') then optErrorHandling(Msg);
   end;

begin
Result  := false;
LoadMsg := '';
Msg     := '';
if LibHandle <> nil
then
   begin
   Result := true;
   exit;
   end;

LibHandle := P3LoadLibrary(LibFileName, LoadMsg);
if LibHandle = nil
then
   begin
   LoadMsg := LoadMsg + ': ' + LibFileName;
   exit;
   end;

Assert(LoadMsg = '', 'ALFA: LoadMsg not empty: ' + LoadMsg);
comp := -1;
@optSetLoadPath := LoadEntry('optSetLoadPath', 0, nil);
@optGetLoadPath := LoadEntry('optGetLoadPath', 0, nil);
LoadMsg := '';  //not an error
if DLLWrapsObject
then
   begin
   @XCreate := LoadEntry('XCreate', 0, nil);
   if @XCreate = nil then exit;
   @XFree   := LoadEntry('XFree', 0, nil);
   if @XFree = nil then exit;
   end;
@XCheck := LoadEntry('XCheck', 0, nil);
if @XCheck = nil then exit;
@XAPIVersion := LoadEntry('XAPIVersion', 0, nil);
if @XAPIVersion = nil then exit;
if not XAPIVersion(APIversion, Msg, comp)
then
   begin
   LoadMsg := Msg;
   exit;
   end;

sign[0] := 3;sign[1] := 11;
@optReadDefinition := LoadEntry('optReadDefinition', 1, @d_optReadDefinition);
sign[0] := 3;sign[1] := 11;
@optReadParameterFile := LoadEntry('optReadParameterFile', 1, @d_optReadParameterFile);
sign[0] := 0;sign[1] := 11;
@optReadFromStr := LoadEntry('optReadFromStr', 1, @d_optReadFromStr);
sign[0] := 3;sign[1] := 11;
@optWriteParameterFile := LoadEntry('optWriteParameterFile', 1, @d_optWriteParameterFile);
sign[0] := 0;
@optClearMessages := LoadEntry('optClearMessages', 0, @d_optClearMessages);
sign[0] := 0;sign[1] := 11;
@optAddMessage := LoadEntry('optAddMessage', 1, @d_optAddMessage);
sign[0] := 0;sign[1] := 3;sign[2] := 12;sign[3] := 4;
@optGetMessage := LoadEntry('optGetMessage', 3, @d_optGetMessage);
sign[0] := 0;
@optResetAll := LoadEntry('optResetAll', 0, @d_optResetAll);
sign[0] := 0;
@optResetAllRecent := LoadEntry('optResetAllRecent', 0, @d_optResetAllRecent);
sign[0] := 0;
@optResetRecentChanges := LoadEntry('optResetRecentChanges', 0, @d_optResetRecentChanges);
sign[0] := 0;sign[1] := 11;
@optShowHelp := LoadEntry('optShowHelp', 1, @d_optShowHelp);
sign[0] := 3;sign[1] := 3;
@optResetNr := LoadEntry('optResetNr', 1, @d_optResetNr);
sign[0] := 3;sign[1] := 11;sign[2] := 4;sign[3] := 4;
@optFindStr := LoadEntry('optFindStr', 3, @d_optFindStr);
sign[0] := 3;sign[1] := 3;sign[2] := 4;sign[3] := 4;sign[4] := 4;sign[5] := 4;sign[6] := 4;sign[7] := 4;
@optGetInfoNr := LoadEntry('optGetInfoNr', 7, @d_optGetInfoNr);
sign[0] := 3;sign[1] := 3;sign[2] := 12;sign[3] := 4;sign[4] := 14;sign[5] := 12;
@optGetValuesNr := LoadEntry('optGetValuesNr', 5, @d_optGetValuesNr);
sign[0] := 3;sign[1] := 3;sign[2] := 3;sign[3] := 13;sign[4] := 11;
@optSetValuesNr := LoadEntry('optSetValuesNr', 4, @d_optSetValuesNr);
sign[0] := 3;sign[1] := 3;sign[2] := 3;sign[3] := 13;sign[4] := 11;
@optSetValues2Nr := LoadEntry('optSetValues2Nr', 4, @d_optSetValues2Nr);
sign[0] := 0;sign[1] := 12;
@optVersion := LoadEntry('optVersion', 1, @d_optVersion);
sign[0] := 0;sign[1] := 12;
@optDefinitionFile := LoadEntry('optDefinitionFile', 1, @d_optDefinitionFile);
sign[0] := 3;sign[1] := 3;sign[2] := 12;sign[3] := 12;
@optGetFromAnyStrList := LoadEntry('optGetFromAnyStrList', 3, @d_optGetFromAnyStrList);
sign[0] := 3;sign[1] := 11;sign[2] := 12;
@optGetFromListStr := LoadEntry('optGetFromListStr', 2, @d_optGetFromListStr);
sign[0] := 3;sign[1] := 11;
@optListCountStr := LoadEntry('optListCountStr', 1, @d_optListCountStr);
sign[0] := 3;sign[1] := 11;sign[2] := 3;sign[3] := 12;
@optReadFromListStr := LoadEntry('optReadFromListStr', 3, @d_optReadFromListStr);
sign[0] := 3;
@optSynonymCount := LoadEntry('optSynonymCount', 0, @d_optSynonymCount);
sign[0] := 3;sign[1] := 3;sign[2] := 12;sign[3] := 12;
@optGetSynonym := LoadEntry('optGetSynonym', 3, @d_optGetSynonym);
sign[0] := 0;sign[1] := 3;
@optEchoSet := LoadEntry('optEchoSet', 1, @d_optEchoSet);
sign[0] := 3;sign[1] := 3;
@optEOLOnlySet := LoadEntry('optEOLOnlySet', 1, @d_optEOLOnlySet);
sign[0] := 0;sign[1] := 3;
@optNoBoundsSet := LoadEntry('optNoBoundsSet', 1, @d_optNoBoundsSet);
sign[0] := 0;sign[1] := 4;sign[2] := 4;
@optErrorCount := LoadEntry('optErrorCount', 2, @d_optErrorCount);
sign[0] := 3;sign[1] := 3;sign[2] := 4;sign[3] := 4;sign[4] := 4;
@optGetBoundsInt := LoadEntry('optGetBoundsInt', 4, @d_optGetBoundsInt);
sign[0] := 3;sign[1] := 3;sign[2] := 14;sign[3] := 14;sign[4] := 14;
@optGetBoundsDbl := LoadEntry('optGetBoundsDbl', 4, @d_optGetBoundsDbl);
sign[0] := 3;sign[1] := 3;sign[2] := 12;
@optGetDefaultStr := LoadEntry('optGetDefaultStr', 2, @d_optGetDefaultStr);
sign[0] := 3;sign[1] := 3;sign[2] := 4;
@optGetIntNr := LoadEntry('optGetIntNr', 2, @d_optGetIntNr);
sign[0] := 3;sign[1] := 3;sign[2] := 4;
@optGetInt2Nr := LoadEntry('optGetInt2Nr', 2, @d_optGetInt2Nr);
sign[0] := 3;sign[1] := 3;sign[2] := 3;
@optSetIntNr := LoadEntry('optSetIntNr', 2, @d_optSetIntNr);
sign[0] := 3;sign[1] := 3;sign[2] := 3;
@optSetInt2Nr := LoadEntry('optSetInt2Nr', 2, @d_optSetInt2Nr);
sign[0] := 3;sign[1] := 3;sign[2] := 12;
@optGetStrNr := LoadEntry('optGetStrNr', 2, @d_optGetStrNr);
sign[0] := 3;sign[1] := 3;sign[2] := 12;sign[3] := 4;sign[4] := 4;
@optGetOptHelpNr := LoadEntry('optGetOptHelpNr', 4, @d_optGetOptHelpNr);
sign[0] := 3;sign[1] := 3;sign[2] := 3;sign[3] := 4;sign[4] := 12;
@optGetEnumHelp := LoadEntry('optGetEnumHelp', 4, @d_optGetEnumHelp);
sign[0] := 3;sign[1] := 3;sign[2] := 12;sign[3] := 4;
@optGetEnumStrNr := LoadEntry('optGetEnumStrNr', 3, @d_optGetEnumStrNr);
sign[0] := 3;sign[1] := 3;sign[2] := 4;
@optGetEnumCount := LoadEntry('optGetEnumCount', 2, @d_optGetEnumCount);
sign[0] := 3;sign[1] := 3;sign[2] := 3;sign[3] := 4;sign[4] := 12;
@optGetEnumValue := LoadEntry('optGetEnumValue', 4, @d_optGetEnumValue);
sign[0] := 3;sign[1] := 3;sign[2] := 12;
@optGetStr2Nr := LoadEntry('optGetStr2Nr', 2, @d_optGetStr2Nr);
sign[0] := 3;sign[1] := 3;sign[2] := 11;
@optSetStrNr := LoadEntry('optSetStrNr', 2, @d_optSetStrNr);
sign[0] := 3;sign[1] := 3;sign[2] := 11;
@optSetStr2Nr := LoadEntry('optSetStr2Nr', 2, @d_optSetStr2Nr);
sign[0] := 3;sign[1] := 3;sign[2] := 14;
@optGetDblNr := LoadEntry('optGetDblNr', 2, @d_optGetDblNr);
sign[0] := 3;sign[1] := 3;sign[2] := 14;
@optGetDbl2Nr := LoadEntry('optGetDbl2Nr', 2, @d_optGetDbl2Nr);
sign[0] := 3;sign[1] := 3;sign[2] := 13;
@optSetDblNr := LoadEntry('optSetDblNr', 2, @d_optSetDblNr);
sign[0] := 3;sign[1] := 3;sign[2] := 13;
@optSetDbl2Nr := LoadEntry('optSetDbl2Nr', 2, @d_optSetDbl2Nr);
sign[0] := 3;sign[1] := 11;sign[2] := 12;
@optGetValStr := LoadEntry('optGetValStr', 2, @d_optGetValStr);
sign[0] := 3;sign[1] := 11;sign[2] := 12;
@optGetVal2Str := LoadEntry('optGetVal2Str', 2, @d_optGetVal2Str);
sign[0] := 3;sign[1] := 3;sign[2] := 12;
@optGetNameNr := LoadEntry('optGetNameNr', 2, @d_optGetNameNr);
sign[0] := 3;sign[1] := 3;sign[2] := 4;
@optGetDefinedNr := LoadEntry('optGetDefinedNr', 2, @d_optGetDefinedNr);
sign[0] := 3;sign[1] := 3;sign[2] := 12;sign[3] := 12;
@optGetHelpNr := LoadEntry('optGetHelpNr', 3, @d_optGetHelpNr);
sign[0] := 3;sign[1] := 3;sign[2] := 12;sign[3] := 4;sign[4] := 4;sign[5] := 12;
@optGetGroupNr := LoadEntry('optGetGroupNr', 5, @d_optGetGroupNr);
sign[0] := 3;sign[1] := 3;
@optGetGroupGrpNr := LoadEntry('optGetGroupGrpNr', 1, @d_optGetGroupGrpNr);
sign[0] := 3;sign[1] := 3;
@optGetOptGroupNr := LoadEntry('optGetOptGroupNr', 1, @d_optGetOptGroupNr);
sign[0] := 3;sign[1] := 3;sign[2] := 12;sign[3] := 4;sign[4] := 4;sign[5] := 14;
@optGetDotOptNr := LoadEntry('optGetDotOptNr', 5, @d_optGetDotOptNr);
sign[0] := 3;sign[1] := 3;sign[2] := 3;sign[3] := 12;
@optGetDotOptUel := LoadEntry('optGetDotOptUel', 3, @d_optGetDotOptUel);
sign[0] := 3;sign[1] := 3;sign[2] := 12;sign[3] := 12;sign[4] := 4;sign[5] := 4;sign[6] := 4;
@optGetIndicatorNr := LoadEntry('optGetIndicatorNr', 6, @d_optGetIndicatorNr);
sign[0] := 3;sign[1] := 3;sign[2] := 3;sign[3] := 12;
@optGetEquIndicatorNr := LoadEntry('optGetEquIndicatorNr', 3, @d_optGetEquIndicatorNr);
sign[0] := 3;sign[1] := 3;sign[2] := 3;sign[3] := 12;
@optGetVarIndicatorNr := LoadEntry('optGetVarIndicatorNr', 3, @d_optGetVarIndicatorNr);
sign[0] := 3;sign[1] := 4;
@optIndicatorCount := LoadEntry('optIndicatorCount', 1, @d_optIndicatorCount);
sign[0] := 3;sign[1] := 4;
@optDotOptCount := LoadEntry('optDotOptCount', 1, @d_optDotOptCount);
sign[0] := 3;sign[1] := 3;sign[2] := 3;
@optSetRefNr := LoadEntry('optSetRefNr', 2, @d_optSetRefNr);
sign[0] := 3;sign[1] := 11;sign[2] := 3;
@optSetRefNrStr := LoadEntry('optSetRefNrStr', 2, @d_optSetRefNrStr);
sign[0] := 3;sign[1] := 3;sign[2] := 3;sign[3] := 12;
@optGetConstName := LoadEntry('optGetConstName', 3, @d_optGetConstName);
sign[0] := 3;sign[1] := 3;sign[2] := 12;
@optGetTypeName := LoadEntry('optGetTypeName', 2, @d_optGetTypeName);
sign[0] := 3;sign[1] := 11;
@optLookUp := LoadEntry('optLookUp', 1, @d_optLookUp);
sign[0] := 0;sign[1] := 10;
@optReadFromPChar := LoadEntry('optReadFromPChar', 1, @d_optReadFromPChar);
sign[0] := 3;
@optCount := LoadEntry('optCount', 0, @d_optCount);
sign[0] := 3;
@optMessageCount := LoadEntry('optMessageCount', 0, @d_optMessageCount);
sign[0] := 3;
@optGroupCount := LoadEntry('optGroupCount', 0, @d_optGroupCount);
sign[0] := 3;
@optRecentEnabled := LoadEntry('optRecentEnabled', 0, @d_optRecentEnabled);
sign[0] := 0; sign[1] := 3;
@optRecentEnabledSet := LoadEntry('optRecentEnabledSet', 1, @d_optRecentEnabledSet);
Assert(LoadMsg = '', 'ALFA: LoadMsg not empty: ' + LoadMsg);
Result := true;
end;

procedure XLibraryUnload;
begin
if LibHandle <> nil
then
   begin
   P3FreeLibrary(LibHandle);
   LibHandle := nil;
   end;

@XCreate               := nil;
@XFree                 := nil;
@optReadDefinition     := nil;
@optReadParameterFile  := nil;
@optReadFromStr        := nil;
@optWriteParameterFile := nil;
@optClearMessages      := nil;
@optAddMessage         := nil;
@optGetMessage         := nil;
@optResetAll           := nil;
@optResetAllRecent     := nil;
@optResetRecentChanges := nil;
@optShowHelp           := nil;
@optResetNr            := nil;
@optFindStr            := nil;
@optGetInfoNr          := nil;
@optGetValuesNr        := nil;
@optSetValuesNr        := nil;
@optSetValues2Nr       := nil;
@optVersion            := nil;
@optDefinitionFile     := nil;
@optGetFromAnyStrList  := nil;
@optGetFromListStr     := nil;
@optListCountStr       := nil;
@optReadFromListStr    := nil;
@optSynonymCount       := nil;
@optGetSynonym         := nil;
@optEchoSet            := nil;
@optEOLOnlySet         := nil;
@optNoBoundsSet        := nil;
@optErrorCount         := nil;
@optGetBoundsInt       := nil;
@optGetBoundsDbl       := nil;
@optGetDefaultStr      := nil;
@optGetIntNr           := nil;
@optGetInt2Nr          := nil;
@optSetIntNr           := nil;
@optSetInt2Nr          := nil;
@optGetStrNr           := nil;
@optGetOptHelpNr       := nil;
@optGetEnumHelp        := nil;
@optGetEnumStrNr       := nil;
@optGetEnumCount       := nil;
@optGetEnumValue       := nil;
@optGetStr2Nr          := nil;
@optSetStrNr           := nil;
@optSetStr2Nr          := nil;
@optGetDblNr           := nil;
@optGetDbl2Nr          := nil;
@optSetDblNr           := nil;
@optSetDbl2Nr          := nil;
@optGetValStr          := nil;
@optGetVal2Str         := nil;
@optGetNameNr          := nil;
@optGetDefinedNr       := nil;
@optGetHelpNr          := nil;
@optGetGroupNr         := nil;
@optGetGroupGrpNr      := nil;
@optGetOptGroupNr      := nil;
@optGetDotOptNr        := nil;
@optGetDotOptUel       := nil;
@optGetIndicatorNr     := nil;
@optGetEquIndicatorNr  := nil;
@optGetVarIndicatorNr  := nil;
@optIndicatorCount     := nil;
@optDotOptCount        := nil;
@optSetRefNr           := nil;
@optSetRefNrStr        := nil;
@optGetConstName       := nil;
@optGetTypeName        := nil;
@optLookUp             := nil;
@optReadFromPChar      := nil;
@optSetLoadPath        := nil;
@optGetLoadPath        := nil;
@optCount            := nil;
@optMessageCount     := nil;
@optGroupCount       := nil;
@optRecentEnabled    := nil;
@optRecentEnabledSet := nil;
end;

function LibLoader(const Path, Name: ShortString; var Msg: ShortString): boolean;
var
   xName  : ShortString;
   xPath  : ShortString;
begin
if Name <> ''
then
   xName := Name
else
   begin
   xName := gamslibname('optdclib');
   xName := OSDllPrefix[OSplatform] + xName  + OSDllExtension[OSplatform];
   end;
if Path = ''
then
   begin
   xPath       := '';
   LibFileName := xName
   end
else
   begin
   xPath       := ExcludeTrailingPathDelimiter(Path);
   LibFileName := xPath + PathDelim + xName;
   end;

Result := XLibraryLoad(Msg);
if @optSetLoadPath <> nil
then
   begin
   if Result
   then
      optSetLoadPath(xPath)
   else
      optSetLoadPath('');
   end;
end;

function optGetReady(var Msg: ShortString): boolean;
begin
if LibHandle = nil
then
   Result := LibLoader('', '', Msg)
else
   begin
   Msg := '';
   Result := true
   end
end;

function optGetReadyX(var Msg: ShortString): boolean;
begin
if LibHandle = nil
then
   begin
   Result := LibLoader(ExtractFilePath(ParamStr(0)), '', Msg);
   if LibHandle = nil
   then
      Result := LibLoader('', '', Msg);
   end
else
   begin
   Msg := '';
   Result := true
   end
end;

function optGetReadyD(const Dir: ShortString; var Msg: ShortString): boolean;
begin
if LibHandle = nil
then
   Result := LibLoader(Dir, '', Msg)
else
   begin
   Msg := '';
   Result := true
   end
end;

function optGetReadyL(const LibName: ShortString; var Msg: ShortString): boolean;
begin
if LibHandle = nil
then
   Result := LibLoader(ExtractFilePath(LibName), ExtractFileName(LibName), Msg)
else
   begin
   Msg := '';
   Result := true
   end
end;

procedure optCreateHandle(popt: pointer; var myopt: pointer);
begin
if myopt = nil
then
   myopt := popt
else
   Assert(myopt = popt, 'optCreateHandle');
end;

function  optGetHandle(popt: pointer): pointer;
begin
Result := popt;
end;

function optCreate(var popt: pointer; var Msg: ShortString): boolean;
begin
Assert(DLLWrapsObject, 'optdcdef.optCreate without an Object');
Result := optGetReady(Msg);
if Result
then
   begin
   XCreate(popt);
   if popt = nil
   then
      begin
      Result := false;
      Msg := 'Library is loaded but error while creating object';
      end
   else
      inc(ObjectCount);
   end
else
   begin
   popt := nil;
   if Msg = '' then Msg := 'Unknown error';
   end;
end;

function optCreateX(var popt: pointer; var Msg: ShortString): boolean;
begin
Assert(DLLWrapsObject, 'optdcdef.optCreate without an Object');
Result := optGetReadyX(Msg);
if Result
then
   begin
   XCreate(popt);
   if popt = nil
   then
      begin
      Result := false;
      Msg := 'Library is loaded but error while creating object';
      end
   else
      inc(ObjectCount);
   end
else
   begin
   popt := nil;
   if Msg = '' then Msg := 'Unknown error';
   end;
end;

function optCreateD(var popt: pointer; const Dir: ShortString; var Msg: shortString): boolean;
begin
Assert(DLLWrapsObject, 'optdcdef.optCreateD without an Object');
Result := optGetReadyD(Dir, Msg);
if Result
then
   begin
   XCreate(popt);
   if popt = nil
   then
      begin
      Result := false;
      Msg := 'Library is loaded but error while creating object';
      end
   else
      inc(ObjectCount);
   end
else
   begin
   popt := nil;
   if Msg = '' then Msg := 'Unknown error';
   end;
end;

function optCreateL(var popt: pointer; const LibName: ShortString; var Msg: shortString): boolean;
begin
Assert(DLLWrapsObject, 'optdcdef.optCreateL without an Object');
Result := optGetReadyL(LibName, Msg);
if Result
then
   begin
   XCreate(popt);
   if popt = nil
   then
      begin
      Result := false;
      Msg := 'Library is loaded but error while creating object';
      end
   else
      inc(ObjectCount);
   end
else
   begin
   popt := nil;
   if Msg = '' then Msg := 'Unknown error';
   end;
end;

procedure optFree  (var popt: pointer);
begin
if @XFree <> nil
then
   begin
   XFree(popt); popt := nil;
   dec(ObjectCount);
   end;
end;

function optLibraryLoaded: boolean;
begin
Result := LibHandle <> nil;
end;

procedure optLibraryUnload;
begin
if LibHandle <> nil
then
   begin
   assert(ObjectCount=0, 'Could not unload library, object not freed.');
   XLibraryUnload;
   end;
end;

initialization

Libhandle := nil;
XLibraryUnload;

end.
