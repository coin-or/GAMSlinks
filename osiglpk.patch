--- Osi/src/OsiGlpk/OsiGlpkSolverInterface.cpp	(Revision 914)
+++ Osi/src/OsiGlpk/OsiGlpkSolverInterface.cpp	(Arbeitskopie)
@@ -80,6 +80,13 @@
 	}
 }
 
+int OsiGlpkprintme(void *info, char *msg) {
+	CoinMessageHandler *myout=(CoinMessageHandler*) info;
+	*myout << msg << CoinMessageEol;
+	return 1;
+}
+
+
 //#############################################################################
 // Solve methods
 //#############################################################################
@@ -90,7 +97,8 @@
         LPX *model = getMutableModelPtr();
 	freeCachedData( OsiGlpkSolverInterface::FREECACHED_RESULTS );
 
-	lpx_set_int_parm(model, LPX_K_MSGLEV, 1);  // suppress most output 
+	lib_print_hook(OsiGlpkprintme, messageHandler()); // tell glpk to use our message handler
+	lpx_set_int_parm(model, LPX_K_MSGLEV, messageHandler()->logLevel());  // set loglevel from message handler 
 	lpx_set_int_parm(model, LPX_K_PRESOL, 1);  // turn on presolver
 	int err = lpx_simplex( model );
 	iter_used_ = lpx_get_int_parm(model, LPX_K_ITCNT);
@@ -140,7 +148,8 @@
         LPX *model = getMutableModelPtr();
 	freeCachedData( OsiGlpkSolverInterface::FREECACHED_RESULTS );
 
-	lpx_set_int_parm(model, LPX_K_MSGLEV, 1);  // suppress most output 
+	lib_print_hook(OsiGlpkprintme, messageHandler()); // tell glpk to use our message handler 
+	lpx_set_int_parm(model, LPX_K_MSGLEV, messageHandler()->logLevel());  // set loglevel from message handler 
 	lpx_set_int_parm(model, LPX_K_DUAL, 1); // Use dual simplex if dual feasible
 	lpx_set_int_parm(model, LPX_K_PRESOL, 0);  // turn off presolver
 
@@ -193,6 +202,11 @@
 	        // Must have an LP solution before running lpx_integer
  	        if (lpx_get_status(model) != LPX_OPT)
 	          initialSolve();
+	        else { // in case that the message handler of loglevel changed
+	        	lib_print_hook(OsiGlpkprintme, messageHandler()); // tell glpk to use our message handler
+		        lpx_set_int_parm(model, LPX_K_MSGLEV, messageHandler()->logLevel());  // set loglevel from message handler
+	        } 
+	          	
 		// What if there's an error there?
 		int err = lpx_integer( model );
 		iter_used_ = lpx_get_int_parm(model, LPX_K_ITCNT);
@@ -463,7 +477,7 @@
 	if( bbWasLast_ == 0 )
 		return lpx_get_prim_stat( model ) == LPX_P_NOFEAS;
 	else
-		return lpx_mip_status( model ) == LPX_NOFEAS;
+		return lpx_mip_status( model ) == LPX_I_NOFEAS;
 }
 
 bool OsiGlpkSolverInterface::isProvenDualInfeasible() const
@@ -2098,7 +2112,7 @@
 // Get a pointer to the instance
 LPX * OsiGlpkSolverInterface::getModelPtr ()
 {
-  freeCachedResults();
+//  freeCachedResults();
   return lp_;
 }
 
--- Osi/src/OsiGlpk/OsiGlpkSolverInterface.hpp	(Revision 914)
+++ Osi/src/OsiGlpk/OsiGlpkSolverInterface.hpp	(Arbeitskopie)
@@ -12,6 +12,7 @@
 #include <string>
 extern "C" {
 #include "glpk.h"
+#include "glplib.h"
 }
 #include "OsiSolverInterface.hpp"
 #include "CoinPackedMatrix.hpp"
