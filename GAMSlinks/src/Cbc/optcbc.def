*
* optcbc.def
*

writemps string 0 "" 1 1 create MPS file for problem
special string 0 "" 1 1 options passed unseen to CBC
names boolean 0 0 1 1 specifies whether variable and equation names should be given to CBC
idiotcrash enumint 0 -1 1 2 idiot crash
 -1 1
 0 1
sprintcrash enumint 0 -1 1 2 sprint crash
 -1 1
 0 1
sifting integer 0 -1 -1 5000000 1 2 synonym for sprint crash
crash enumstr 0 "off" 1 2 use crash method to get dual feasible
 "off" 1
 "on" 1
 "solow_halim" 1
 "halim_solow" 1
maxfactor integer 0 200 1 999999 1 2 maximum number of iterations between refactorizations
crossover boolean 0 1 1 2 crossover to simplex algorithm after barrier
dualpivot enumstr 0 "auto" 1 2 dual pivot choice algorithm
 "auto" 1
 "dantzig" 1
 "steepest" 1
 "partial" 1
primalpivot enumstr 0 "auto" 1 2 primal pivot choice algorithm
 "auto" 1
 "dantzig" 1
 "steepest" 1
 "partial" 1
 "exact" 1
 "change" 1
perturbation boolean 0 1 1 2 perturbation of problem
scaling enumstr 0 "auto" 1 2 scaling method
 "off" 1
 "auto" 1
 "equilibrium" 1
 "geometric" 1
presolve boolean 0 1 1 2 switch for initial presolve of LP
tol_dual double 0 1e-7 0 maxdouble 1 2 dual feasibility tolerance
tol_primal double 0 1e-7 0 maxdouble 1 2 primal feasibility tolerance
tol_presolve double 0 1e-8 0 maxdouble 1 2 tolerance used in presolve
startalg enumstr 0 "dual" 1 2 LP solver for root node
 "primal" 1
 "dual" 1
 "barrier" 1
tol_integer double 0 1e-6 0 maxdouble 1 3 tolerance for integrality
sollim enumint 0 -1 1 3 limit on number of solutions
 -1 1
strongbranching integer 0 5 0 999999 1 3 strong branching
trustpseudocosts integer 0 5 -1 2000000 1 3 after howmany nodes we trust the pseudo costs
cutdepth enumint 0 -1 1 4 depth in tree at which cuts are applied
 -1 1
cut_passes_root integer 0 0 -999999 999999 1 4 number of cut passes at root node
cut_passes_tree integer 0 1 -999999 999999 1 4 number of cut passes at nodes in the tree
cuts enumstr 0 "on" 1 4 global switch for cutgenerators
 "off" 1
 "on" 1
 "root" 1
 "ifmove" 1
 "forceon" 1
cliquecuts string 0 "ifmove" 1 4 Clique Cuts
flowcovercuts string 0 "ifmove" 1 4 Flow Cover Cuts
gomorycuts string 0 "ifmove" 1 4 Gomory Cuts
knapsackcuts string 0 "ifmove" 1 4 Knapsack Cover Cuts
liftandprojectcuts string 0 "off" 1 4 Lift and Project Cuts
mircuts string 0 "ifmove" 1 4 Mixed Integer Rounding Cuts
twomircuts string 0 "root" 1 4 Two Phase Mixed Integer Rounding Cuts
probingcuts enumstr 0 "ifmove" 1 4 Probing Cuts
 "off" 1
 "on" 1
 "root" 1
 "ifmove" 1
 "forceon" 1
 "forceonbut" 1
 "forceonstrong" 1
 "forceonbutstrong" 1
reduceandsplitcuts string 0 "off" 1 4 Reduce and Split Cuts
residualcapacitycuts string 0 "off" 1 4 Residual Capacity Cuts
heuristics boolean 0 1 1 5 global switch for heuristics
combinesolutions boolean 0 1 1 5 combine solutions heuristic
feaspump boolean 0 1 1 5 feasibility pump
feaspump_passes integer 0 20 0 10000 1 5 number of feasibility passes
greedyheuristic enumstr 0 "on" 1 5 greedy heuristic
 "off" 1
 "on" 1
 "root" 1
localtreesearch boolean 0 0 1 5 local tree search heuristic
rins boolean 0 0 1 5 relaxed induced neighborhood search
roundingheuristic boolean 0 1 1 5 rounding heuristic
coststrategy enumstr 0 "off" 1 3 how to use costs as priorities
 "off" 1
 "priorities" 1
 "columnorder" 1
 "binaryfirst" 1
 "binarylast" 1
 "length" 1
nodestrategy enumstr 0 "fewest" 1 3 how to select nodes
 "hybrid" 1
 "fewest" 1
 "depth" 1
 "upfewest" 1
 "downfewest" 1
 "updepth" 1
 "downdepth" 1
preprocess enumstr 0 "on" 1 3 integer presolve
 "off" 1
 "on" 1
 "equal" 1
 "equalall" 1
 "sos" 1
 "trysos" 1
printfrequency enumint 0 0 1 3 frequency of status prints
 0 1
increment double 0 0 0 maxdouble 1 3 increment of cutoff when new incumbent
usercutcall string 0 "" 1 6 The GAMS command line to call the cut generator
usercutfirst integer 0 10 0 maxint 1 6 Calls the cut generator for the first n nodes
usercutfreq integer 0 10 0 maxint 1 6 Determines the frequency of the cut generator model calls
usercutinterval integer 0 100 0 maxint 1 6 Determines the interval when to apply the multiplier for the frequency of the cut generator model calls
usercutmult integer 0 2 0 maxint 1 6 Determines the multiplier for the frequency of the cut generator model calls
usercutnewint boolean 0 1 1 6 Calls the cut generator if the solver found a new integer feasible solution
usergdxin string 0 "bchin.gdx" 1 6 The name of the GDX file read back into Cplex
usergdxname string 0 "bchout.gdx" 1 6 The name of the GDX file exported from the solver with the solution at the node
usergdxnameinc string 0 "bchout_i.gdx" 1 6 The name of the GDX file exported from the solver with the incumbent solution
usergdxprefix string 0 "" 1 6 Prefixes usergdxin, usergdxname, and usergdxnameinc
userheurcall string 0 "" 1 6 The GAMS command line to call the heuristic
userheurfirst integer 0 10 0 maxint 1 6 Calls the heuristic for the first n nodes
userheurfreq integer 0 10 0 maxint 1 6 Determines the frequency of the heuristic model calls
userheurinterval integer 0 100 0 maxint 1 6 Determines the interval when to apply the multiplier for the frequency of the heuristic model calls
userheurmult integer 0 2 0 maxint 1 6 Determines the multiplier for the frequency of the heuristic model calls
userheurnewint boolean 0 1 1 6 Calls the heuristic if the solver found a new integer feasible solution
userheurobjfirst integer 0 0 0 maxint 1 6 ***
userjobid string 0 "" 1 6 Postfixes lf, o on call adds --userjobid to the call. Postfixes gdxname, gdxnameinc and gdxin
userkeep boolean 0 0 1 6 Calls gamskeep instead of gams
reslim double 0 1000 0 maxdouble 1 1 resource limit
iterlim integer 0 10000 0 maxint 1 1 iteration limit
nodelim integer 0 maxint 0 maxint 1 3 node limit
nodlim integer 0 maxint 0 maxint 1 3 node limit
optca double 0 0 0 maxdouble 1 3 absolute stopping tolerance
optcr double 0 0.1 0 maxdouble 1 3 relative stopping tolerance
cutoff double 0 0 mindouble maxdouble 1 3 cutoff for objective function value
nobounds immediate nobounds 0 1 ignores bounds on options
readfile immediate readfile 0 1 read secondary option file
*
* Groups
* <group-ident> group <group-number <help-context> <help-text>
*
general group 1 1 General Options
lpoptions group 2 1 LP Options
mipgeneral group 3 1 MIP Options
mipcuts group 4 1 MIP Options for Cutting Plane Generators
mipheu group 5 1 MIP Options for Heuristics
bch group 6 1 MIP Options for the GAMS Branch Cut and Heuristic Facility
*** End of file
