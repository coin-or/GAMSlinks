*
* optmycbc.def
*

reslim double 0 1000 0 maxdouble 1 1 resource limit
special string 0 "" 1 1 options passed unseen to CBC
writemps string 0 "" 1 1 create MPS file for problem
iterlim integer 0 10000 0 maxint 1 2 iteration limit
idiotcrash enumint 0 -1 1 2 idiot crash
 -1 1
 0 1
sprintcrash enumint 0 -1 1 2 sprint crash
 -1 1
 0 1
sifting integer 0 -1 -1 5000000 1 2 synonym for sprint crash
crash enumstr 0 "off" 1 2 use crash method to get dual feasible
 "off" 1
 "on" 1
 "solow_halim" 1
 "halim_solow" 1
maxfactor integer 0 200 1 999999 1 2 maximum number of iterations between refactorizations
crossover boolean 0 1 1 2 crossover to simplex algorithm after barrier
dualpivot enumstr 0 "auto" 1 2 dual pivot choice algorithm
 "auto" 1
 "dantzig" 1
 "steepest" 1
 "partial" 1
primalpivot enumstr 0 "auto" 1 2 primal pivot choice algorithm
 "auto" 1
 "dantzig" 1
 "steepest" 1
 "partial" 1
 "exact" 1
 "change" 1
perturbation boolean 0 1 1 2 perturbation of problem
scaling enumstr 0 "auto" 1 2 scaling method
 "off" 1
 "auto" 1
 "equilibrium" 1
 "geometric" 1
presolve boolean 0 1 1 2 switch for initial presolve of LP
passpresolve integer 0 5 -200 100 1 2 how many passes to do in presolve
tol_dual double 0 1e-7 0 maxdouble 1 2 dual feasibility tolerance
tol_primal double 0 1e-7 0 maxdouble 1 2 primal feasibility tolerance
tol_presolve double 0 1e-8 0 maxdouble 1 2 tolerance used in presolve
startalg enumstr 0 "dual" 1 2 LP solver for root node
 "primal" 1
 "dual" 1
 "barrier" 1
threads integer 0 1 0 maxint 1 3 number of threads to use (available on Unix variants only)
strategy enumint 0 1 1 3 switches on groups of features
 0 1
 1 1
 2 1
mipstart boolean 0 0 1 3 whether it should be tried to use the initial variable levels as initial MIP solution
tol_integer double 0 1e-6 0 maxdouble 1 3 tolerance for integrality
sollim enumint 0 -1 1 3 limit on number of solutions
 -1 1
dumpsolutions string 0 "" 1 3 name of solutions index gdx file for writing alternate solutions
maxsol integer 0 100 0 maxint 1 3 maximal number of solutions to store during search
strongbranching integer 0 5 0 999999 1 3 strong branching
trustpseudocosts integer 0 5 -1 2000000 1 3 after howmany nodes we trust the pseudo costs
coststrategy enumstr 0 "off" 1 3 how to use costs as priorities
 "off" 1
 "priorities" 1
 "columnorder" 1
 "binaryfirst" 1
 "binarylast" 1
 "length" 1
nodestrategy enumstr 0 "fewest" 1 3 how to select nodes
 "hybrid" 1
 "fewest" 1
 "depth" 1
 "upfewest" 1
 "downfewest" 1
 "updepth" 1
 "downdepth" 1
preprocess enumstr 0 "on" 1 3 integer presolve
 "off" 1
 "on" 1
 "equal" 1
 "equalall" 1
 "sos" 1
 "trysos" 1
printfrequency integer 0 0 0 maxint 1 3 frequency of status prints
 0 1
loglevel integer 0 1 0 maxint 1 3 CBC loglevel
increment double 0 0 0 maxdouble 1 3 increment of cutoff when new incumbent
solvefinal boolean 0 1 1 3 final solve of MIP with fixed discrete variables
miptrace string 0 "" 1 3 name of trace file for branch-and-bound information
miptracenodefreq integer 0 100 0 maxint 1 3 frequency in number of nodes for writing to mip trace file
miptracetimefreq double 0 5 0 maxdouble 1 3 frequency in seconds for writing to mip trace file
nodelim integer 0 maxint 0 maxint 1 3 node limit
nodlim integer 0 maxint 0 maxint 1 3 node limit
optca double 0 0 0 maxdouble 1 3 absolute stopping tolerance
optcr double 0 0.1 0 maxdouble 1 3 relative stopping tolerance
cutoff double 0 0 mindouble maxdouble 1 3 cutoff for objective function value
cutdepth enumint 0 -1 1 4 depth in tree at which cuts are applied
 -1 1
cut_passes_root integer 0 0 -999999 999999 1 4 number of cut passes at root node
cut_passes_tree integer 0 1 -999999 999999 1 4 number of cut passes at nodes in the tree
cuts enumstr 0 "on" 1 4 global switch for cutgenerators
 "off" 1
 "on" 1
 "root" 1
 "ifmove" 1
 "forceon" 1
cliquecuts string 0 "ifmove" 1 4 Clique Cuts
flowcovercuts string 0 "ifmove" 1 4 Flow Cover Cuts
gomorycuts string 0 "ifmove" 1 4 Gomory Cuts
knapsackcuts string 0 "ifmove" 1 4 Knapsack Cover Cuts
liftandprojectcuts string 0 "off" 1 4 Lift and Project Cuts
mircuts string 0 "ifmove" 1 4 Mixed Integer Rounding Cuts
twomircuts string 0 "root" 1 4 Two Phase Mixed Integer Rounding Cuts
probingcuts enumstr 0 "ifmove" 1 4 Probing Cuts
 "off" 1
 "on" 1
 "root" 1
 "ifmove" 1
 "forceon" 1
 "forceonbut" 1
 "forceonstrong" 1
 "forceonbutstrong" 1
reduceandsplitcuts string 0 "off" 1 4 Reduce and Split Cuts
residualcapacitycuts string 0 "off" 1 4 Residual Capacity Cuts
heuristics boolean 0 1 1 5 global switch for heuristics
combinesolutions boolean 0 1 1 5 combine solutions heuristic
dins boolean 0 0 1 5 distance induced neighborhood search
divingrandom boolean 0 0 1 5 turns on random diving heuristic
divingcoefficient boolean 0 1 1 5 coefficient diving heuristic
divingfractional boolean 0 0 1 5 fractional diving heuristic
divingguided boolean 0 0 1 5 guided diving heuristic
divinglinesearch boolean 0 0 1 5 line search diving heuristic
divingpseudocost boolean 0 0 1 5 pseudo cost diving heuristic
divingvectorlength boolean 0 0 1 5 vector length diving heuristic
feaspump boolean 0 1 1 5 feasibility pump
feaspump_passes integer 0 20 0 10000 1 5 number of feasibility passes
greedyheuristic enumstr 0 "on" 1 5 greedy heuristic
 "off" 1
 "on" 1
 "root" 1
localtreesearch boolean 0 0 1 5 local tree search heuristic
naiveheuristics boolean 0 0 1 5 naive heuristics
pivotandfix boolean 0 0 1 5 pivot and fix heuristic
randomizedrounding boolean 0 0 1 5 randomized rounding heuristis
rens boolean 0 0 1 5 relaxation enforced neighborhood search
rins boolean 0 0 1 5 relaxed induced neighborhood search
roundingheuristic boolean 0 1 1 5 rounding heuristic
vubheuristic enumint 0 0 1 5 VUB heuristic
 0 1
 1 1
nobounds immediate nobounds 0 1 ignores bounds on options
readfile immediate readfile 0 1 read secondary option file
*
* Groups
* <group-ident> group <group-number <help-context> <help-text>
*
general group 1 1 General Options
lpoptions group 2 1 LP Options
mipgeneral group 3 1 MIP Options
mipcuts group 4 1 MIP Options for Cutting Plane Generators
mipheu group 5 1 MIP Options for Heuristics
*** End of file
