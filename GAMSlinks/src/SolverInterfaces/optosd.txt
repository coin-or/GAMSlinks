introduction
GAMS/OS brings the open source Optimization Services project to the broad audience of GAMS users.
The code has been written primarily by Horand Gassmann, Jun Ma, and Kipp Martin.
The GAMS interface for OS is maintained by Stefan Vigerske, Humboldt University, in a COIN-OR project called GAMSlinks.
For more information visit the web site for
<a href="http://www.coin-or.org">COIN-OR</a>,
<a href="https://projects.coin-or.org/OS">OS<a>, and
<a href="https://projects.coin-or.org/GAMSlinks">GAMSlinks</a>.<BR>
For documentation of GAMS parameters, see the <A href="http://www.gams.com/docs/parame.htm">GAMS parameters documentation</A>.


solver
Specifies the solver that is used to solve an instance.
Valid values are clp, cbc, glpk, ipopt, bonmin, couenne, none.
If 'none' is specified, then solving is skipped. This value is only valid for a local solve. 


service
Specifies the URL of an Optimization Services Server.
If specified, then this server is contacted and the service method specified under service_method is executed.
Note that by default the server chooses a solver that is appropriate to the model type.
You can change the solver with the solver option.


service_method
Specifies the method to execute on a server.
The method ``solve'' is used for a synchronous call. 
The OS process will submit the job to the server and wait for the result.
If this is not desirable, the remote solver service can also be used asynchronously, i.e., a job can be submitted (via "send") and at a later date it can be checked whether it is completed (via "knock") and the result can be retrieved (via "retrieve").


service_method.'solve'
Specifies that an OS server should solve the provided instance and return the result.
CoinOS will wait until the OS server returns the result.


service_method.getJobID
When working in asynchronous mode, the server needs to uniquely identify each job.
The getJobID service method results in the server returning a unique job id.
The job id is printed to the log and should be used in the send method.


service_method.send
Specifies that the model instance is send to an OS server and the server should solve this instance.
CoinOS does not wait until the OS server returns the result but returns when submission of the instance is completed.
It is required to specify an unused job id (retrieved via getJobID) via an OSoL file.


service_method.knock
Specifies that the status of all or a specific solve process is requested from an OS server.
By default, the status of all jobs on the server will be displayed in the format of the Optimization Services process Language (OSpL).
If you specify a file with the writeospl option, then the result will be written to this file.
If only the status of one job is required, then an osol file containing a job id (see method ``send'') should be specified with the readosol option.
By default, a standard OSpL file is send to the server.
The user can specify a customized file via the readospl option.


service_method.retrieve
Specifies that an optimization result should be requested from an OS server.
You should specify an OSoL file containing the JobID by using the readosil option (see method ``send'').


service_method.kill
Specifies that a solve process should be interrupted on an OS server.
You should specify an OSoL file containing the JobID by using the readosil option (see method ``send'').


writeosil
Specifies the name of a file in which the GAMS model instance should be writting in OSiL format.


writeosrl
Specifies the name of a file in which the result of a solve process (solution, status, ...) should be writting in OSrL format.
 

readosol
Specifies the name of an option file in OSoL format that is given to the solver or an OS server.
This way it is possible to pass options directly to the COIN-OR solvers interfaced by OS.


readospl
Specifies the name of an OSpL file to use for the knock method.


writeospl
Specifies the name of an OSpL file in which the answer from the knock or kill method is written.
  