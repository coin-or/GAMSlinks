= Main installation steps =

 1. Install a GAMS system, if you do not have one.
 2. Apply patch files to COIN-OR packages to fix some minor bugs and add additional optional features.
 3. Download the GAMS I/O libraries for your system.
 4. Download additional COIN-OR solvers that are not included by default.
 5. Download and install Glpk, if you want to use the GAMS/GLPK link.
 6. Download and install Lapack, Blas, and HSL or MUMPS, if you want to use the GAMS/IPOPT link.
 7. Modify the site script for the configure call of the GAMSlinks project.
 8. Call configure, make, and make install.
 9. Install the GAMS/COIN-OR links in your GAMS system.
10. Troubleshooting?

= Detailed instructions =

== 1. Installation of a GAMS system ==

To use the COIN-OR/GAMS links, you need a GAMS system.
It is recommended to have at least version 22.3.
To build the links on Linux, also some libraries from the Intel Fortran Compiler are required.
Since they are included into a GAMS system, it sufficies to have a GAMS system reachable.

You can download a GAMS demonstration system at http://www.gams.com/download.
The demonstrations limits are:
 * Number of constraints: 300
 * Number of variables: 300
 * Number of nonzero elements: 2000 (of which 1000 nonlinear)
 * Number of discrete variables: 50 (including semi continuous, semi integer and member of SOS-Sets)

== 2. Apply patch files to COIN-OR packages ==

In the base directory of the GAMSlinks package, you will find a patch file.
This patch fixes some minor bugs in the OsiGlpkSolverInterface and adds additional routines to get more information about GLPKs status at termination.
If you do not apply this patch, GAMS/GLPK will also work, but the GAMS model status code might be set wrong.
Apply this patch by typing
>  patch -p0 < osiglpk.patch
in the GAMSlinks base directory.

== 3. Installation of GAMS I/O libraries ==

The GAMSlinks use a set of GAMS I/O library to read an optimization model, write a solution file, and handle option files.

The directory ThirdParty/GAMSIO contains scripts that downloads (precompiled) GAMS I/O libraries.
According to the kind of system you use, you have to choose a script with the correct acronym.
Currently available are:
 * LX3: Linux systems on a 32-bit Intel or AMD CPU.
 * LEI: Linux systems on a 64-bit Intel or AMD CPU.
 * SIG: Solaris 10.0 or higher systems on a 64-bit Intel or AMD CPU.
 * DII: Darwin systems on Intel CPU.
 * VIS: Windows XP, Windows Server 2003, and compatible on AMD- or Intel-based (x86) architectures.

== 4. Download additional COIN-OR solvers ==

Using the GAMS/OSI link, additional solvers which provide a COIN-OR OSI (OpenSolverInterface) can be easily connected to GAMS.
Currently, the build system and the OSI link are prepared to compile with support for the COIN-OR solvers SYMPHONY, DyLP, and Vol.

To activate them, you only need to provide the corresponding solver.
If you have obtained the GAMSlinks system via subversion (svn), then the easiest way to do this is by opening the file Externals in your favorite editor,
uncommenting the line that corresponds to the solver(s) you want to use, and to call in the GAMSlinks base directory:
 svn propset svn:externals -F Externals .
 svn update

== 5. GNU Linear Programming Toolkit (GLPK) ==

In the directory ThirdParty/Glpk you find the script get.Glpk that downloads the GNU Linear Programming Toolkit (http://www.gnu.org/software/glpk/glpk.html).
Just run it or read the instructions INSTALL.Glpk in ThirdParty/Glpk.

== 6. Installation of Lapack, Blas, and HSL ==

Ipopt requires some further third party packages.
For Lapack and Blas you find download scripts in the directories ThirdParty/Lapack and ThirdParty/Blas.
If you want Ipopt to use the HSL routines as linear solver, you have to go to the HSL web site (http://hsl.rl.ac.uk/archive/hslarchive.html),
obtain the source code for MA27, and put it into the directory ThirdParty/HSL.
Note that these routines are freely available for non-commercial, academic use, but it is your responsibility to investigate the licensing of all third party code.
Alternatively, you can use the MUMPS routines as linear solver. A download script for them is available at ThirdParty/Mumps.

For more information we refer to the corresponding part of the Ipopt documentation (http://www.coin-or.org/Ipopt/documentation/node13.html).

== 7. Setup configure call ==

We suggest to compile the code in a different place than the one where the source code is located using the VPATH feature of the build system.

You should consider whether you need to the following options of the configure script (either as arguments in your configure call or by setting up a site-file):

 * When a GAMS system is in the search path, it will automatically be found by the GAMSlinks configure script.
   Otherwise if you work under Linux you have to provide a path with the --with-gamssystem option.
   
 * If you do not install the GAMS I/O libraries in ThirdParty/GAMSIO, you can use the option --gams-io to set the path of the GAMS I/O libraries.

 * To compile 32-bit libraries on a 64-bit machine you might need to overwrite the GAMS I/O code that the configure scripts automatically determine.
   This can be done with the option --with-gamsio-code, e.g., --with-gamsio-code=LX3 to use the 32-bit Linux libraries.

 * If you compile under Linux, and do not have the GAMS system or Intel Fortran Compiler libraries in your path, you can give the path to the Intel Fortran Compiler libraries with the --with-fort-libdir option.

When compiling under Windows with the Microsoft C-compiler, you might need to set also the following variables:

 * Unfortunately, while the GAMS I/O libraries are compiled with the Microsoft C-compiler and linked against LIBC, the COIN-OR buildsystem links by default against LIBCMT when compiling with the Microsoft compiler (cl).
   In this case you need to change the compiler flags that are used when COIN-OR packages are compiled:
   ADD_CXXFLAGS="-nologo -EHsc -GR"
   DBG_CXXFLAGS=" "
   OPT_CXXFLAGS="-O2 -DNDEBUG"

 * MAKE is the name of the make program to use. For me, I had to set it to gmake.
   MAKE=gmake

== 8. Configure and make COIN-OR/GAMS links ==

Now you can use the GAMSlinks build system.
That is, you just call
 1. configure
 2. make (or the make program that you prefer, e.g., gmake)
 3. make install (or using the make program that you prefer)

This should setup the Makefiles, compile all COIN-OR packages and install binaries for the COIN-OR/GAMS links in the subdirectory bin.

== 9. Install COIN-OR solvers in your GAMS system ==

The make install call also created the files gmscc_.zip, gmscg_.zip, gmsip_.zip, gmsbm_.zip, and (optional) gmsos_.zip which contain GAMS/Cbc, GAMS/GLPK, GAMS/Ipopt, GAMS/Bonmin, and (optional) GAMS/Osi.
To install them in your GAMS system, you copy these files into the GAMS system directory and call gamsinst there.
gamsinst will then unpack the files and makes GAMS aware about the new solvers.

To use the solvers under GAMS, you give the arguments MIP=Cbc, MIP=Glpk, NLP=Ipopt, MINLP=Bonmin, or LP=OSI to your gams call.
Note, that CoinCbc, CoinGlpk, CoinIpopt, and CoinBonmin are already available with newer GAMS distributions.
This are the COIN-OR solvers as they are shipped within the GAMS distribution, not the one that you have just compiled.

== 10. Troubleshooting ==

With GAMS system before 22.6, it can happen that calling Bonmin or Ipopt fails with a message concerning a missing symbol in the library liboptdclib.so (or similiar, depending on the system type).
This is due to a missing backward compatibility in the GAMS I/O libraries.
You can easily upgrade the outdated library in your GAMS distribution by overwriting it with the corresponding file from ThirdParty/GAMSIO/<system-type>.
