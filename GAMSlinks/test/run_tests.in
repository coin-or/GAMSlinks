#!/bin/sh
# Copyright (C) 2008 GAMS Development and others
# All Rights Reserved.
# This file is distributed under the Common Public License.
#
## $Id$
#
# Author: Stefan Vigerske

srcdir="@srcdir@"
gamspath="@GAMS_PATH@"

if test x$gamspath = xUNAVAILABLE; then
  echo "No GAMS system available."
  echo "Please download demo system from www.gams.com, rerun configure, install the solvers, and try again."
  exit 1
else
  echo "Using GAMS system at " $gamspath
fi

#echo " "
echo Getting quality tests driver from GAMS test library...
$gamspath/testlib quality

if test ! -e quality.gms ; then
  echo "Failed to obtain quality.gms from GAMS test library."
  exit 1
fi

if test -e $gamspath/gamslice.txt ; then
  echo "Found GAMS licence file. We will run all tests."
  demoparam=
else
  echo "Did not found GAMS licence file. We will run only tests that can be run in demomode."
  demoparam="--DEMOSIZE=1" 
fi

solvers=
skiplist=
stdskiplist=
declare -a testlist
if test @gamslinks_build_ipopt@ = 1 ; then
  solvers="$solvers , Ipopt"
  skiplist="$skiplist skip('Ipopt','lp03')=yes;"
  skiplist="$skiplist skip('Ipopt','sl4lp03')=yes;"
  skiplist="$skiplist skip('Ipopt','lp10')=yes;"
  skiplist="$skiplist skip('Ipopt','sl4lp10')=yes;"
  testlist[${#testlist[@]}]="--solver ipopt --suite lp"
  testlist[${#testlist[@]}]="--solver ipopt --suite nlp"
  testlist[${#testlist[@]}]="--solver ipopt --suite qcp"
fi
if test @gamslinks_build_glpk@ = 1 ; then
  solvers="$solvers , Glpk"
  skiplist="$skiplist skip('Glpk','sos1a')=yes;"
  skiplist="$skiplist skip('Glpk','sl4sos1a')=yes;"
  skiplist="$skiplist skip('Glpk','semicon1')=yes;"
  skiplist="$skiplist skip('Glpk','sl4scon1')=yes;"
  testlist[${#testlist[@]}]="--solver glpk --suite lp"
  testlist[${#testlist[@]}]="--solver glpk --suite mip user1=rmip=glpk"
fi
if test @gamslinks_build_cbc@ = 1 ; then
  solvers="$solvers , Cbc"
  skiplist="$skiplist skip('Cbc','semicon1')=yes;"
  skiplist="$skiplist skip('Cbc','sl4scon1')=yes;"
  testlist[${#testlist[@]}]="--solver cbc --suite lp"
  testlist[${#testlist[@]}]="--solver cbc --suite mip user1=rmip=cbc"
fi
if test @gamslinks_build_bonmin@ = 1 ; then
  solvers="$solvers , Bonmin"
  skiplist="$skiplist skip('Bonmin','sos1a')=yes;"
  skiplist="$skiplist skip('Bonmin','sl4sos1a')=yes;"
  skiplist="$skiplist skip('Bonmin','semicon1')=yes;"
  skiplist="$skiplist skip('Bonmin','sl4scon1')=yes;"
  skiplist="$skiplist skip('Bonmin','lp03')=yes;"
  skiplist="$skiplist skip('Bonmin','sl4lp03')=yes;"
  skiplist="$skiplist skip('Bonmin','lp10')=yes;"
  skiplist="$skiplist skip('Bonmin','sl4lp10')=yes;"
  testlist[${#testlist[@]}]="--solver bonmin --suite lp"
  testlist[${#testlist[@]}]="--solver bonmin --suite mip user1=rmip=bonmin"
  testlist[${#testlist[@]}]="--solver bonmin --suite nlp"
  testlist[${#testlist[@]}]="--solver bonmin --suite qcp"
fi
if test @gamslinks_build_osi@ = 1 ; then
  solvers="$solvers , Osi"
  skiplist="$skiplist skip('Osi','sos1a')=yes;"
  skiplist="$skiplist skip('Osi','sl4sos1a')=yes;"
  skiplist="$skiplist skip('Osi','semicon1')=yes;"
  skiplist="$skiplist skip('Osi','sl4scon1')=yes;"
  
  stdskiplist="$stdskiplist slvstdskip('Osi')=yes;"
 
  if test @coin_build_clp@ = 1 ; then
    echo "solver clp" > osi.opt
    testlist[${#testlist[@]}]="--solver osi --suite lp user1=\"optdir=`pwd` optfile=1\""
  fi
    
  if test @coin_build_cbc@ = 1 ; then
    echo "solver cbc" > osi.op2
    testlist[${#testlist[@]}]="--solver osi --suite lp user1=\"optdir=`pwd` optfile=2\""
    testlist[${#testlist[@]}]="--solver osi --suite mip user1=\"optdir=`pwd` optfile=2 rmip=osi\""
  fi
  
  if test @coin_build_glpk@ = 1 ; then
    echo "solver glpk" > osi.op3
    testlist[${#testlist[@]}]="--solver osi --suite lp user1=\"optdir=`pwd` optfile=3\""
    testlist[${#testlist[@]}]="--solver osi --suite mip user1=\"optdir=`pwd` optfile=3 rmip=osi\""
  fi

  if test @coin_build_dylp@ = 1 ; then
    echo "solver dylp" > osi.op4
    # lp03 fail because it reports all variables are free in row sum(i,x(i))=0 (DyLP ticket 11)
    # unfortunately, this skips to lp03 test for all osi solver
#    skiplist="$skiplist skip('Osi','lp03')=yes;"
#    skiplist="$skiplist skip('Osi','sl4lp03')=yes;"
# dylp is currently skipped:
# lp01, lp11, and lp12 fail because DyLP does not like problems like min 0 s.t. x = 0, or min 0 s.t. nothing (DyLP ticket 10)
#    testlist[${#testlist[@]}]="--solver osi --suite lp user1=\"optdir=`pwd` optfile=4\""
  fi

  if test @coin_build_symphony@ = 1 ; then
    echo "solver symphony" > osi.op5
    testlist[${#testlist[@]}]="--solver osi --suite mip user1=\"optdir=`pwd` optfile=5 rmip=osi\""
  fi
  
fi

if test @gamslinks_build_scip@ = 1 ; then
  solvers="$solvers , Scip"
  skiplist="$skiplist skip('Scip','sos1a')=yes;"
  skiplist="$skiplist skip('Scip','sl4sos1a')=yes;"
  skiplist="$skiplist skip('Scip','semicon1')=yes;"
  skiplist="$skiplist skip('Scip','sl4scon1')=yes;"
  stdskiplist="$stdskiplist slvstdskip('Scip')=yes;"  #do not complain about output to stdout currently
  testlist[${#testlist[@]}]="--solver scip --suite lp"
  testlist[${#testlist[@]}]="--solver scip --suite mip user1=rmip=scip"
fi


echo "Patch quality test driver to get COIN solvers and skip list in." 
#we add our solvers to the list of master solvers and put our skiplist somewhere (in front of skip('convert',mdl)=yes)
sed -e "/master set of solvers/s/\/;\$/$solvers \/;/" \
    -e "/^skip('convert'/s/^/$skiplist /" \
    -e "/^set slvtest/s/^/$stdskiplist /" \
    quality.gms > quality_coin.gms
echo ""

#remove all log or failure files
rm -f quality_test_*.log failures_qa*.gms testlib.*
rm -rf @GAMSIO_CIA@_qa_* failed_test_* onetest*

#indicates whether there was a failed test, also return code of this script
testfailed=0

for (( i=0 ; i<${#testlist[@]} ; i++ )) ; do
  echo "Run quality test $(($i+1)) of ${#testlist[@]} with options " ${testlist[$i]} 

	if $gamspath/gams quality_coin.gms ${testlist[$i]} $demoparam lo=2 logfile=quality_test_$i.log ; then
		echo "Test " ${testlist[$i]} " passed."
	else
		testfailed=1
		rename @GAMSIO_CIA@_qa_ failed_test_$i_ @CIA_CODE@_qa_* 
		mv failures_qa.gms failures_qa_$i.gms    
		echo "Test " ${testlist[$i]} " failed. Content of failures_qa_$i.gms:" 1>&2
		cat failures_qa_$i.gms 1>&2
	fi
	echo ""
	
done

exit $testfailed
