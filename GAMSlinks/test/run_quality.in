#!/bin/bash
# Copyright (C) GAMS Development and others 2008-2011
# All Rights Reserved.
# This file is distributed under the Eclipse Public License.
#
# Author: Stefan Vigerske

srcdir="@srcdir@"
gamspath="@GAMS_PATH@"

if test "x$gamspath" = xUNAVAILABLE; then
  echo "No GAMS system available."
  echo "Please download demo system from www.gams.com, rerun configure, install the solvers, and try again."
  exit 1
else
  echo "Using GAMS system at " $gamspath
fi

# clear up previous test, create new directory, and go there
rm -rf quality
mkdir -p quality
cd quality

#echo " "
echo Getting quality tests driver from GAMS test library...
"$gamspath/testlib" quality

if test ! -e quality.gms ; then
  echo "Failed to obtain quality.gms from GAMS test library."
  exit 1
fi

if test -e "$gamspath/gamslice.txt" ; then
  echo "Found GAMS licence file. We will run all tests."
  demoparam=
else
  echo "Did not found GAMS licence file. We will run only tests that can be run in demomode."
  demoparam="--DEMOSIZE=1" 
fi

solvers=
skiplist=
stdskiplist=
declare -a testlist
@COIN_HAS_IPOPT_TRUE@solvers="$solvers , MyIpopt"
@COIN_HAS_IPOPT_TRUE@skiplist="$skiplist skip('MyIpopt','lp03')=yes;"
@COIN_HAS_IPOPT_TRUE@skiplist="$skiplist skip('MyIpopt','sl4lp03')=yes;"
@COIN_HAS_IPOPT_TRUE@skiplist="$skiplist skip('MyIpopt','lp10')=yes;"
@COIN_HAS_IPOPT_TRUE@skiplist="$skiplist skip('MyIpopt','sl4lp10')=yes;"
@COIN_HAS_IPOPT_TRUE@skiplist="$skiplist skip('MyIpopt','lp13')=yes;"
@COIN_HAS_IPOPT_TRUE@testlist[${#testlist[@]}]="--solver myipopt --suite lp"
@COIN_HAS_IPOPT_TRUE@testlist[${#testlist[@]}]="--solver myipopt --suite nlp"
@COIN_HAS_IPOPT_TRUE@testlist[${#testlist[@]}]="--solver myipopt --suite qcp"

@COIN_HAS_OSISPX_TRUE@solvers="$solvers , MyOsiSoplex"
@COIN_HAS_OSISPX_TRUE@testlist[${#testlist[@]}]="--solver myosisoplex --suite lp"

@COIN_HAS_OSIGLPK_TRUE@solvers="$solvers , MyOsiGlpk"
@COIN_HAS_OSIGLPK_TRUE@skiplist="$skiplist skip('MyOsiGlpk','lp10')=yes;"
@COIN_HAS_OSIGLPK_TRUE@skiplist="$skiplist skip('MyOsiGlpk','sl4lp10')=yes;"
@COIN_HAS_OSIGLPK_TRUE@skiplist="$skiplist skip('MyOsiGlpk','sos1a')=yes;"
@COIN_HAS_OSIGLPK_TRUE@skiplist="$skiplist skip('MyOsiGlpk','sl4sos1a')=yes;"
@COIN_HAS_OSIGLPK_TRUE@skiplist="$skiplist skip('MyOsiGlpk','semicon1')=yes;"
@COIN_HAS_OSIGLPK_TRUE@skiplist="$skiplist skip('MyOsiGlpk','sl4scon1')=yes;"
@COIN_HAS_OSIGLPK_TRUE@skiplist="$skiplist skip('MyOsiGlpk','mip02')=yes;"
@COIN_HAS_OSIGLPK_TRUE@skiplist="$skiplist skip('MyOsiGlpk','mip03')=yes;"
@COIN_HAS_OSIGLPK_TRUE@testlist[${#testlist[@]}]="--solver myosiglpk --suite lp"
@COIN_HAS_OSIGLPK_TRUE@testlist[${#testlist[@]}]="--solver myosiglpk --suite mip user1=\"--MIPMCHECKS=0 rmip=myosiglpk\""
@COIN_HAS_OSIGLPK_TRUE@#stdskiplist="$stdskiplist slvstdoutskip('MyOsiGlpk')=yes;"

@COIN_HAS_CBC_TRUE@solvers="$solvers , MyCbc"
@COIN_HAS_CBC_TRUE@skiplist="$skiplist skip('MyCbc','lp03')=yes;"
@COIN_HAS_CBC_TRUE@skiplist="$skiplist skip('MyCbc','sl4lp03')=yes;"
@COIN_HAS_CBC_TRUE@testlist[${#testlist[@]}]="--solver mycbc --suite lp"
@COIN_HAS_CBC_TRUE@testlist[${#testlist[@]}]="--solver mycbc --suite mip user1=rmip=mycbc"

@COIN_HAS_BONMIN_TRUE@solvers="$solvers , MyBonmin"
@COIN_HAS_BONMIN_TRUE@testlist[${#testlist[@]}]="--solver mybonmin --suite mip user1=rmip=mycbc"

@COIN_HAS_COUENNE_TRUE@solvers="$solvers , MyCouenne"
@COIN_HAS_COUENNE_TRUE@skiplist="$skiplist skip('MyCouenne','nlpqcp01')=yes;"
@COIN_HAS_COUENNE_TRUE@skiplist="$skiplist skip('MyCouenne','nlpqcp02')=yes;"
@COIN_HAS_COUENNE_TRUE@skiplist="$skiplist skip('MyCouenne','qcp01')=yes;"
@COIN_HAS_COUENNE_TRUE@skiplist="$skiplist skip('MyCouenne','qcp02')=yes;"
@COIN_HAS_COUENNE_TRUE@testlist[${#testlist[@]}]="--solver mycouenne --suite nlp user1=\"--MCHECKS=0 reslim=60\""
@COIN_HAS_COUENNE_TRUE@testlist[${#testlist[@]}]="--solver mycouenne --suite qcp user1=\"--QPMCHECKS=0 reslim=60\""

@COIN_HAS_SCIP_TRUE@solvers="$solvers , MyScip"
@COIN_HAS_SCIP_TRUE@skiplist="$skiplist skip('MyScip','mip02')=yes;"
@COIN_HAS_SCIP_TRUE@skiplist="$skiplist skip('MyScip','qcp05')=yes;"
@COIN_HAS_SCIP_TRUE@testlist[${#testlist[@]}]="--solver myscip --suite mip user1=\"--MIPMCHECKS=0\""
@COIN_HAS_SCIP_TRUE@testlist[${#testlist[@]}]="--solver myscip --suite qcp user1=\"--QPMCHECKS=0 --TESTTOL=1e-3\""

echo "Patch quality test driver to get COIN solvers and skip list in." 
# We add our solvers to the list of master solvers and put our solver-model skiplist and our skiplist for stdout tests somewhere.
sed -e "/master set of solvers/s/\/;\$/$solvers \/;/" \
    -e "/^skip('nlpec'/s/^/$skiplist /" \
    -e "/^set slvstderrskip/s/^/$stdskiplist /" \
    -e "/^set slvtest/s/^/$stdskiplist /" \
    quality.gms > quality_coin.gms
echo ""

#indicates whether there was a failed test, also return code of this script
testfailed=0

for (( i=0 ; i<${#testlist[@]} ; i++ )) ; do
	echo "Run quality test $(($i+1)) of ${#testlist[@]} with options " ${testlist[$i]} 

	"$gamspath"/gams quality_coin.gms ${testlist[$i]} $demoparam lo=2 logfile=quality_test_$i.log
  
	if grep -q "Congratulations!" quality_test_$i.log ; then
		echo "Test " ${testlist[$i]} " passed."
	else
		testfailed=1
		rename _qa_ failed_test_$i_ *_qa_* 
		mv failures_qa.gms failures_qa_$i.gms    
		echo "Test " ${testlist[$i]} " failed. Content of failures_qa_$i.gms:" 1>&2
		cat failures_qa_$i.gms 1>&2
	fi
	echo ""
	
done

if test $testfailed = 0 ;
then
  echo "All quality tests passed."
else
  echo "There were failed quality tests."
fi

exit $testfailed
