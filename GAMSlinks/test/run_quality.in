#!/bin/bash
# Copyright (C) GAMS Development and others 2008-2009
# All Rights Reserved.
# This file is distributed under the Common Public License.
#
## $Id$
#
# Author: Stefan Vigerske

srcdir="@srcdir@"
gamspath="@GAMS_PATH@"
cia=`echo @GAMSIO_CIA@ | cut -c 5-`

if test "x$gamspath" = xUNAVAILABLE; then
  echo "No GAMS system available."
  echo "Please download demo system from www.gams.com, rerun configure, install the solvers, and try again."
  exit 1
else
  echo "Using GAMS system at " $gamspath
fi

# clear up previous test, create new directory, and go there
rm -rf quality
mkdir -p quality
cd quality

#echo " "
echo Getting quality tests driver from GAMS test library...
"$gamspath/testlib" quality

if test ! -e quality.gms ; then
  echo "Failed to obtain quality.gms from GAMS test library."
  exit 1
fi

if test -e "$gamspath/gamslice.txt" ; then
  echo "Found GAMS licence file. We will run all tests."
  demoparam=
else
  echo "Did not found GAMS licence file. We will run only tests that can be run in demomode."
  demoparam="--DEMOSIZE=1" 
fi

solvers=
skiplist=
stdskiplist=
declare -a testlist
if test @gamslinks_build_ipopt@ = 1 ; then
  solvers="$solvers , MyIpopt"
  skiplist="$skiplist skip('MyIpopt','lp03')=yes;"
  skiplist="$skiplist skip('MyIpopt','sl4lp03')=yes;"
  skiplist="$skiplist skip('MyIpopt','lp10')=yes;"
  skiplist="$skiplist skip('MyIpopt','sl4lp10')=yes;"
  skiplist="$skiplist skip('MyIpopt','lp13')=yes;"
  testlist[${#testlist[@]}]="--solver myipopt --suite lp"
  testlist[${#testlist[@]}]="--solver myipopt --suite nlp"
  testlist[${#testlist[@]}]="--solver myipopt --suite qcp"
fi

if test @gamslinks_build_glpk@ = 1 ; then
  solvers="$solvers , MyOsiGlpk"
  skiplist="$skiplist skip('MyOsiGlpk','lp10')=yes;"
  skiplist="$skiplist skip('MyOsiGlpk','sl4lp10')=yes;"
  skiplist="$skiplist skip('MyOsiGlpk','sos1a')=yes;"
  skiplist="$skiplist skip('MyOsiGlpk','sl4sos1a')=yes;"
  skiplist="$skiplist skip('MyOsiGlpk','semicon1')=yes;"
  skiplist="$skiplist skip('MyOsiGlpk','sl4scon1')=yes;"
  testlist[${#testlist[@]}]="--solver myosiglpk --suite lp"
  testlist[${#testlist[@]}]="--solver myosiglpk --suite mip user1=rmip=myosiglpk"

  #from GAMS 22.7 on, slvstdskip has been renamed to slvstdoutskip
  if grep -q slvstdskip quality.gms ; then
    stdskiplist="$stdskiplist slvstdskip('MyOsiGlpk')=yes;"
  else
    stdskiplist="$stdskiplist slvstdoutskip('MyOsiGlpk')=yes;"
  fi
fi

if test @gamslinks_build_cbc@ = 1 ; then
  solvers="$solvers , MyCbc"
  testlist[${#testlist[@]}]="--solver mycbc --suite lp"
  testlist[${#testlist[@]}]="--solver mycbc --suite mip user1=rmip=mycbc"
  skiplist="$skiplist skip('MyCbc','lp03')=yes;"
  skiplist="$skiplist skip('MyCbc','sl4lp03')=yes;"
fi

if test @gamslinks_build_bonmin@ = 1 ; then
  solvers="$solvers , MyBonmin"
  skiplist="$skiplist skip('MyBonmin','lp03')=yes;"
  skiplist="$skiplist skip('MyBonmin','sl4lp03')=yes;"
  testlist[${#testlist[@]}]="--solver mybonmin --suite lp"
  testlist[${#testlist[@]}]="--solver mybonmin --suite mip user1=rmip=mybonmin"
  testlist[${#testlist[@]}]="--solver mybonmin --suite nlp"
  testlist[${#testlist[@]}]="--solver mybonmin --suite qcp"
fi

if test @gamslinks_build_couenne@ = 1 ; then
  solvers="$solvers , MyCouenne"
  skiplist="$skiplist skip('MyCouenne','lp03')=yes;"
  skiplist="$skiplist skip('MyCouenne','sl4lp03')=yes;"
  skiplist="$skiplist skip('MyCouenne','nlpqcp01')=yes;"
  skiplist="$skiplist skip('MyCouenne','nlpqcp02')=yes;"
  skiplist="$skiplist skip('MyCouenne','qcp01')=yes;"
  skiplist="$skiplist skip('MyCouenne','qcp02')=yes;"
  testlist[${#testlist[@]}]="--solver mycouenne --suite lp"
  testlist[${#testlist[@]}]="--solver mycouenne --suite mip user1=rmip=mycouenne"
  testlist[${#testlist[@]}]="--solver mycouenne --suite nlp user1=\"--MCHECKS=0\""
  testlist[${#testlist[@]}]="--solver mycouenne --suite qcp user1=\"--QPMCHECKS=0 reslim=60\""
fi

if test @gamslinks_build_scip@ = 1 ; then
  solvers="$solvers , MyScip"
  skiplist="$skiplist skip('MyScip','lp03')=yes;"
  skiplist="$skiplist skip('MyScip','sl4lp03')=yes;"
  skiplist="$skiplist skip('MyScip','semicon1')=yes;"
  skiplist="$skiplist skip('MyScip','sl4scon1')=yes;"
  #skiplist="$skiplist skip('MyScip','qcp02')=yes;"
  testlist[${#testlist[@]}]="--solver myscip --suite lp"
  testlist[${#testlist[@]}]="--solver myscip --suite mip user1=\"--MIPMCHECKS=0 rmip=myscip\""
  testlist[${#testlist[@]}]="--solver myscip --suite qcp user1=\"--QPMCHECKS=0 --TESTTOL=1e-3\""
fi

echo "Patch quality test driver to get COIN solvers and skip list in." 
#We add our solvers to the list of master solvers,
#put our solver-model skiplist somewhere (in front of skip('convert',mdl)=yes), and
#put our skiplist for stdout tests somewhere (in front of set slvtest).
sed -e "/master set of solvers/s/\/;\$/$solvers \/;/" \
    -e "/^skip('convert'/s/^/$skiplist /" \
    -e "/^set slvstderrskip/s/^/$stdskiplist /" \
    -e "/^set slvtest/s/^/$stdskiplist /" \
    quality.gms > quality_coin.gms
echo ""

#indicates whether there was a failed test, also return code of this script
testfailed=0

for (( i=0 ; i<${#testlist[@]} ; i++ )) ; do
  echo "Run quality test $(($i+1)) of ${#testlist[@]} with options " ${testlist[$i]} 

	if "$gamspath"/gams quality_coin.gms ${testlist[$i]} $demoparam lo=2 logfile=quality_test_$i.log ; then
		echo "Test " ${testlist[$i]} " passed."
	else
		testfailed=1
		rename ${cia}_qa_ failed_test_$i_ ${cia}_qa_* 
		mv failures_qa.gms failures_qa_$i.gms    
		echo "Test " ${testlist[$i]} " failed. Content of failures_qa_$i.gms:" 1>&2
		cat failures_qa_$i.gms 1>&2
	fi
	echo ""
	
done

if test $testfailed = 0 ;
then
  echo "All quality tests passed."
else
  echo "There were failed quality tests."
fi

exit $testfailed
